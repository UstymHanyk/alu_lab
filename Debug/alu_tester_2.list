
alu_tester_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08009080  08009080  00019080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009298  08009298  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009298  08009298  00019298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092a0  080092a0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092a0  080092a0  000192a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092a4  080092a4  000192a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080092a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000090  08009338  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08009338  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b87a  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004068  00000000  00000000  0003b93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0003f9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00040b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a3d  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198c1  00000000  00000000  0005b585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ecd6  00000000  00000000  00074e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  00103b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009068 	.word	0x08009068

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08009068 	.word	0x08009068

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08c      	sub	sp, #48	; 0x30
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 031c 	add.w	r3, r7, #28
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	4b72      	ldr	r3, [pc, #456]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a71      	ldr	r2, [pc, #452]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b6f      	ldr	r3, [pc, #444]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0310 	and.w	r3, r3, #16
 80004fe:	61bb      	str	r3, [r7, #24]
 8000500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	4b6b      	ldr	r3, [pc, #428]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a6a      	ldr	r2, [pc, #424]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b68      	ldr	r3, [pc, #416]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
 8000522:	4b64      	ldr	r3, [pc, #400]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a63      	ldr	r2, [pc, #396]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b61      	ldr	r3, [pc, #388]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000536:	613b      	str	r3, [r7, #16]
 8000538:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	4b5d      	ldr	r3, [pc, #372]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a5c      	ldr	r2, [pc, #368]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b5a      	ldr	r3, [pc, #360]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a55      	ldr	r2, [pc, #340]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000560:	f043 0302 	orr.w	r3, r3, #2
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b53      	ldr	r3, [pc, #332]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	4b4f      	ldr	r3, [pc, #316]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a4e      	ldr	r2, [pc, #312]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 800057c:	f043 0308 	orr.w	r3, r3, #8
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
 8000582:	4b4c      	ldr	r3, [pc, #304]	; (80006b4 <MX_GPIO_Init+0x1e4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	f003 0308 	and.w	r3, r3, #8
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|a1_Pin|a2_Pin|b1_Pin
 800058e:	2200      	movs	r2, #0
 8000590:	f641 7108 	movw	r1, #7944	; 0x1f08
 8000594:	4848      	ldr	r0, [pc, #288]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 8000596:	f001 fbe1 	bl	8001d5c <HAL_GPIO_WritePin>
                          |b2_Pin|op_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	4847      	ldr	r0, [pc, #284]	; (80006bc <MX_GPIO_Init+0x1ec>)
 80005a0:	f001 fbdc 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Cin_GPIO_Port, Cin_Pin, GPIO_PIN_RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2101      	movs	r1, #1
 80005a8:	4845      	ldr	r0, [pc, #276]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 80005aa:	f001 fbd7 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b4:	4843      	ldr	r0, [pc, #268]	; (80006c4 <MX_GPIO_Init+0x1f4>)
 80005b6:	f001 fbd1 	bl	8001d5c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin|r2_Pin;
 80005ba:	2384      	movs	r3, #132	; 0x84
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	483a      	ldr	r0, [pc, #232]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 80005ce:	f001 f903 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|a1_Pin|a2_Pin|b1_Pin
 80005d2:	f641 7308 	movw	r3, #7944	; 0x1f08
 80005d6:	61fb      	str	r3, [r7, #28]
                          |b2_Pin|op_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4619      	mov	r1, r3
 80005ea:	4833      	ldr	r0, [pc, #204]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 80005ec:	f001 f8f4 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005f0:	2332      	movs	r3, #50	; 0x32
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	482c      	ldr	r0, [pc, #176]	; (80006b8 <MX_GPIO_Init+0x1e8>)
 8000606:	f001 f8e7 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4826      	ldr	r0, [pc, #152]	; (80006bc <MX_GPIO_Init+0x1ec>)
 8000622:	f001 f8d9 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000626:	2301      	movs	r3, #1
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800062a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 031c 	add.w	r3, r7, #28
 8000638:	4619      	mov	r1, r3
 800063a:	4823      	ldr	r0, [pc, #140]	; (80006c8 <MX_GPIO_Init+0x1f8>)
 800063c:	f001 f8cc 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Cin_Pin;
 8000640:	2301      	movs	r3, #1
 8000642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Cin_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	481a      	ldr	r0, [pc, #104]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 8000658:	f001 f8be 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Cout_Pin|r1_Pin;
 800065c:	2306      	movs	r3, #6
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <MX_GPIO_Init+0x1f0>)
 8000670:	f001 f8b2 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = b2_test_Pin|b1_test_Pin|OTG_FS_OverCurrent_Pin;
 8000674:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_GPIO_Init+0x1f4>)
 800068a:	f001 f8a5 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800068e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000692:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4619      	mov	r1, r3
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_GPIO_Init+0x1f4>)
 80006a8:	f001 f896 	bl	80017d8 <HAL_GPIO_Init>

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40020800 	.word	0x40020800
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40020000 	.word	0x40020000

080006cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f003 f8fd 	bl	8003908 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 fd2e 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200000bc 	.word	0x200000bc
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <HAL_I2C_MspInit+0x84>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d12c      	bne.n	80007a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000766:	f44f 7310 	mov.w	r3, #576	; 0x240
 800076a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	2312      	movs	r3, #18
 800076e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000770:	2301      	movs	r3, #1
 8000772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000778:	2304      	movs	r3, #4
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <HAL_I2C_MspInit+0x8c>)
 8000784:	f001 f828 	bl	80017d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 8000792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_I2C_MspInit+0x88>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020400 	.word	0x40020400

080007b8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_I2S2_Init+0x50>)
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MX_I2S2_Init+0x54>)
 80007c0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_I2S2_Init+0x50>)
 80007c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_I2S2_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_I2S2_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_I2S2_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <MX_I2S2_Init+0x50>)
 80007de:	4a0c      	ldr	r2, [pc, #48]	; (8000810 <MX_I2S2_Init+0x58>)
 80007e0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_I2S2_Init+0x50>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <MX_I2S2_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_I2S2_Init+0x50>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_I2S2_Init+0x50>)
 80007f6:	f003 fa53 	bl	8003ca0 <HAL_I2S_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000800:	f000 fcb8 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20000110 	.word	0x20000110
 800080c:	40003800 	.word	0x40003800
 8000810:	00017700 	.word	0x00017700

08000814 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_I2S3_Init+0x54>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_I2S3_Init+0x58>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2S3_Init+0x54>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S3_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S3_Init+0x54>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_I2S3_Init+0x54>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S3_Init+0x54>)
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <MX_I2S3_Init+0x5c>)
 800083e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S3_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2S3_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2S3_Init+0x54>)
 8000854:	f003 fa24 	bl	8003ca0 <HAL_I2S_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800085e:	f000 fc89 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000158 	.word	0x20000158
 800086c:	40003c00 	.word	0x40003c00
 8000870:	00017700 	.word	0x00017700

08000874 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a59      	ldr	r2, [pc, #356]	; (80009f8 <HAL_I2S_MspInit+0x184>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d15b      	bne.n	800094e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
 800089a:	4b58      	ldr	r3, [pc, #352]	; (80009fc <HAL_I2S_MspInit+0x188>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a57      	ldr	r2, [pc, #348]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ae:	623b      	str	r3, [r7, #32]
 80008b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	4b51      	ldr	r3, [pc, #324]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a50      	ldr	r2, [pc, #320]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	4b4a      	ldr	r3, [pc, #296]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a49      	ldr	r2, [pc, #292]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
 80008e8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ea:	2304      	movs	r3, #4
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008fa:	2306      	movs	r3, #6
 80008fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	483e      	ldr	r0, [pc, #248]	; (8000a00 <HAL_I2S_MspInit+0x18c>)
 8000906:	f000 ff67 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4619      	mov	r1, r3
 8000924:	4836      	ldr	r0, [pc, #216]	; (8000a00 <HAL_I2S_MspInit+0x18c>)
 8000926:	f000 ff57 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800092a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800093c:	2305      	movs	r3, #5
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	482f      	ldr	r0, [pc, #188]	; (8000a04 <HAL_I2S_MspInit+0x190>)
 8000948:	f000 ff46 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800094c:	e04f      	b.n	80009ee <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a2d      	ldr	r2, [pc, #180]	; (8000a08 <HAL_I2S_MspInit+0x194>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d14a      	bne.n	80009ee <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_I2S_MspInit+0x188>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	4a26      	ldr	r2, [pc, #152]	; (80009fc <HAL_I2S_MspInit+0x188>)
 8000962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000966:	6413      	str	r3, [r2, #64]	; 0x40
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <HAL_I2S_MspInit+0x188>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_I2S_MspInit+0x188>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097c:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <HAL_I2S_MspInit+0x188>)
 800097e:	f043 0301 	orr.w	r3, r3, #1
 8000982:	6313      	str	r3, [r2, #48]	; 0x30
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <HAL_I2S_MspInit+0x188>)
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_I2S_MspInit+0x188>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_I2S_MspInit+0x188>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_I2S_MspInit+0x188>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009ac:	2310      	movs	r3, #16
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009bc:	2306      	movs	r3, #6
 80009be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c4:	4619      	mov	r1, r3
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <HAL_I2S_MspInit+0x198>)
 80009c8:	f000 ff06 	bl	80017d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009cc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009de:	2306      	movs	r3, #6
 80009e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_I2S_MspInit+0x18c>)
 80009ea:	f000 fef5 	bl	80017d8 <HAL_GPIO_Init>
}
 80009ee:	bf00      	nop
 80009f0:	3738      	adds	r7, #56	; 0x38
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40003800 	.word	0x40003800
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40003c00 	.word	0x40003c00
 8000a0c:	40020000 	.word	0x40020000

08000a10 <setSuccessSign.8178>:

    };

  	int failure =0;

    void setSuccessSign(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	f8c7 c004 	str.w	ip, [r7, #4]
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a20:	4806      	ldr	r0, [pc, #24]	; (8000a3c <setSuccessSign.8178+0x2c>)
 8000a22:	f001 f99b 	bl	8001d5c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2c:	4803      	ldr	r0, [pc, #12]	; (8000a3c <setSuccessSign.8178+0x2c>)
 8000a2e:	f001 f995 	bl	8001d5c <HAL_GPIO_WritePin>
    }
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40020c00 	.word	0x40020c00

08000a40 <main>:
{
 8000a40:	b5b0      	push	{r4, r5, r7, lr}
 8000a42:	f5ad 6d99 	sub.w	sp, sp, #1224	; 0x4c8
 8000a46:	af00      	add	r7, sp, #0
int main(void)
 8000a48:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000a4c:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
  HAL_Init();
 8000a50:	f000 fcec 	bl	800142c <HAL_Init>
  SystemClock_Config();
 8000a54:	f000 fb0a 	bl	800106c <SystemClock_Config>
  MX_GPIO_Init();
 8000a58:	f7ff fd3a 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a5c:	f7ff fe36 	bl	80006cc <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a60:	f7ff feaa 	bl	80007b8 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a64:	f7ff fed6 	bl	8000814 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a68:	f000 fb94 	bl	8001194 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a6c:	f007 feea 	bl	8008844 <MX_USB_HOST_Init>
      uint16_t testPins[8] = {a2_Pin, a1_Pin, b2_Pin, b1_Pin,  op_Pin, r2_Pin, r1_Pin, Cout_Pin};
 8000a70:	4bf7      	ldr	r3, [pc, #988]	; (8000e50 <main+0x410>)
 8000a72:	f207 44a4 	addw	r4, r7, #1188	; 0x4a4
 8000a76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      GPIO_TypeDef *testPorts[8] = {a2_GPIO_Port,a1_GPIO_Port,b2_GPIO_Port,b1_GPIO_Port,op_GPIO_Port, r2_GPIO_Port,r1_GPIO_Port, Cout_GPIO_Port};
 8000a7c:	4bf5      	ldr	r3, [pc, #980]	; (8000e54 <main+0x414>)
 8000a7e:	f207 4484 	addw	r4, r7, #1156	; 0x484
 8000a82:	461d      	mov	r5, r3
 8000a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int tests[][9]={
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f008 fa14 	bl	8008ec8 <memset>
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	61da      	str	r2, [r3, #28]
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2201      	movs	r2, #1
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	2201      	movs	r2, #1
 8000abc:	651a      	str	r2, [r3, #80]	; 0x50
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	65da      	str	r2, [r3, #92]	; 0x5c
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	675a      	str	r2, [r3, #116]	; 0x74
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2201      	movs	r2, #1
 8000ace:	679a      	str	r2, [r3, #120]	; 0x78
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2201      	movs	r2, #1
 8000adc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2201      	movs	r2, #1
 8000aec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2201      	movs	r2, #1
 8000af4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	2201      	movs	r2, #1
 8000afc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2201      	movs	r2, #1
 8000b04:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2201      	movs	r2, #1
 8000b14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2201      	movs	r2, #1
 8000b24:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2201      	movs	r2, #1
 8000b34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2201      	movs	r2, #1
 8000b44:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2201      	movs	r2, #1
 8000b54:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2201      	movs	r2, #1
 8000b64:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2201      	movs	r2, #1
 8000b74:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2201      	movs	r2, #1
 8000b84:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2201      	movs	r2, #1
 8000b94:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2201      	movs	r2, #1
 8000bac:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2201      	movs	r2, #1
 8000be4:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2201      	movs	r2, #1
 8000bec:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2201      	movs	r2, #1
 8000c04:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2201      	movs	r2, #1
 8000c14:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2201      	movs	r2, #1
 8000c24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2201      	movs	r2, #1
 8000c34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2201      	movs	r2, #1
 8000c44:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2201      	movs	r2, #1
 8000c54:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2201      	movs	r2, #1
 8000c64:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2201      	movs	r2, #1
 8000c74:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2201      	movs	r2, #1
 8000c84:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2201      	movs	r2, #1
 8000c94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2201      	movs	r2, #1
 8000cac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2201      	movs	r2, #1
 8000cec:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2201      	movs	r2, #1
 8000d04:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2201      	movs	r2, #1
 8000d14:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2201      	movs	r2, #1
 8000d24:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2201      	movs	r2, #1
 8000d34:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2201      	movs	r2, #1
 8000d44:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2201      	movs	r2, #1
 8000d54:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f8c3 2360 	str.w	r2, [r3, #864]	; 0x360
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2201      	movs	r2, #1
 8000d64:	f8c3 2370 	str.w	r2, [r3, #880]	; 0x370
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2201      	movs	r2, #1
 8000d74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2201      	movs	r2, #1
 8000d84:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2201      	movs	r2, #1
 8000d94:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2201      	movs	r2, #1
 8000da4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2201      	movs	r2, #1
 8000dac:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2201      	movs	r2, #1
 8000db4:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2201      	movs	r2, #1
 8000de4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	2201      	movs	r2, #1
 8000dec:	f8c3 23e4 	str.w	r2, [r3, #996]	; 0x3e4
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2201      	movs	r2, #1
 8000df4:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2201      	movs	r2, #1
 8000e04:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2201      	movs	r2, #1
 8000e14:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2201      	movs	r2, #1
 8000e24:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2201      	movs	r2, #1
 8000e34:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2201      	movs	r2, #1
 8000e44:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	e004      	b.n	8000e58 <main+0x418>
 8000e4e:	bf00      	nop
 8000e50:	08009080 	.word	0x08009080
 8000e54:	08009090 	.word	0x08009090
 8000e58:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8000e5c:	1d3b      	adds	r3, r7, #4
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2201      	movs	r2, #1
 8000e68:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	2201      	movs	r2, #1
 8000e78:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2201      	movs	r2, #1
 8000e88:	f8c3 2454 	str.w	r2, [r3, #1108]	; 0x454
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f8c3 245c 	str.w	r2, [r3, #1116]	; 0x45c
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	2201      	movs	r2, #1
 8000e98:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
  	int failure =0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  failure=0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4

	  	  for(int i=0; i <32;i++){
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8000ece:	e06d      	b.n	8000fac <main+0x56c>
	  		  HAL_GPIO_WritePin(Cin_GPIO_Port, Cin_Pin, 1);  // carry-in always 1
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4841      	ldr	r0, [pc, #260]	; (8000fdc <main+0x59c>)
 8000ed6:	f000 ff41 	bl	8001d5c <HAL_GPIO_WritePin>


	  		  for(int j=0;j<5;j++){
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000ee0:	e024      	b.n	8000f2c <main+0x4ec>
	  			  HAL_GPIO_WritePin(testPorts[j], testPins[j], tests[i][j]);
 8000ee2:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8000eec:	4413      	add	r3, r2
 8000eee:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8000ef2:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8000efc:	4413      	add	r3, r2
 8000efe:	f833 4c24 	ldrh.w	r4, [r3, #-36]
 8000f02:	1d39      	adds	r1, r7, #4
 8000f04:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8000f08:	4613      	mov	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	f8d7 24c0 	ldr.w	r2, [r7, #1216]	; 0x4c0
 8000f12:	4413      	add	r3, r2
 8000f14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f000 ff1d 	bl	8001d5c <HAL_GPIO_WritePin>
	  		  for(int j=0;j<5;j++){
 8000f22:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000f26:	3301      	adds	r3, #1
 8000f28:	f8c7 34c0 	str.w	r3, [r7, #1216]	; 0x4c0
 8000f2c:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	; 0x4c0
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	ddd6      	ble.n	8000ee2 <main+0x4a2>
	  		  }
	  		  HAL_Delay(25);
 8000f34:	2019      	movs	r0, #25
 8000f36:	f000 faeb 	bl	8001510 <HAL_Delay>

	  		  for(int j=5; j<8;j++){
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8000f40:	e02b      	b.n	8000f9a <main+0x55a>
	  			  checkIfEqual(HAL_GPIO_ReadPin(testPorts[j],testPins[j]), tests[i][j]);
 8000f42:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f853 2c44 	ldr.w	r2, [r3, #-68]
 8000f52:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	f507 6199 	add.w	r1, r7, #1224	; 0x4c8
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f000 fed3 	bl	8001d10 <HAL_GPIO_ReadPin>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	1d39      	adds	r1, r7, #4
 8000f70:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8000f74:	4613      	mov	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	4413      	add	r3, r2
 8000f7a:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 8000f7e:	4413      	add	r3, r2
 8000f80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f84:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 8000f88:	4694      	mov	ip, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f000 f858 	bl	8001040 <checkIfEqual.8186>
	  		  for(int j=5; j<8;j++){
 8000f90:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000f94:	3301      	adds	r3, #1
 8000f96:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 8000f9a:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	ddcf      	ble.n	8000f42 <main+0x502>
	  	  for(int i=0; i <32;i++){
 8000fa2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8000fac:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8000fb0:	2b1f      	cmp	r3, #31
 8000fb2:	dd8d      	ble.n	8000ed0 <main+0x490>
	  		  }

	  	  }
	  	  if (failure==0){
 8000fb4:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d104      	bne.n	8000fc6 <main+0x586>
	  	  		  	setSuccessSign();
 8000fbc:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000fc0:	469c      	mov	ip, r3
 8000fc2:	f7ff fd25 	bl	8000a10 <setSuccessSign.8178>
	  	  		}
	  	  Blink();
 8000fc6:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000fca:	469c      	mov	ip, r3
 8000fcc:	f000 f820 	bl	8001010 <Blink.8182>
	  	 HAL_Delay(100);
 8000fd0:	2064      	movs	r0, #100	; 0x64
 8000fd2:	f000 fa9d 	bl	8001510 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000fd6:	f007 fc5b 	bl	8008890 <MX_USB_HOST_Process>
	  failure=0;
 8000fda:	e772      	b.n	8000ec2 <main+0x482>
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <setFailureSign.8180>:
    void setFailureSign(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	f8c7 c004 	str.w	ip, [r7, #4]
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff0:	4806      	ldr	r0, [pc, #24]	; (800100c <setFailureSign.8180+0x2c>)
 8000ff2:	f000 feb3 	bl	8001d5c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <setFailureSign.8180+0x2c>)
 8000ffe:	f000 fead 	bl	8001d5c <HAL_GPIO_WritePin>
    }
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40020c00 	.word	0x40020c00

08001010 <Blink.8182>:
    void Blink(){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	f8c7 c004 	str.w	ip, [r7, #4]
    	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800101a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <Blink.8182+0x2c>)
 8001020:	f000 fece 	bl	8001dc0 <HAL_GPIO_TogglePin>
    	HAL_Delay(80);
 8001024:	2050      	movs	r0, #80	; 0x50
 8001026:	f000 fa73 	bl	8001510 <HAL_Delay>
    	HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 800102a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <Blink.8182+0x2c>)
 8001030:	f000 fec6 	bl	8001dc0 <HAL_GPIO_TogglePin>
    }
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020c00 	.word	0x40020c00

08001040 <checkIfEqual.8186>:
    void checkIfEqual(int outputVal, int inputVal){
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	4664      	mov	r4, ip
 800104c:	f8c7 c004 	str.w	ip, [r7, #4]
    	if(outputVal!= inputVal){
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	429a      	cmp	r2, r3
 8001056:	d005      	beq.n	8001064 <checkIfEqual.8186+0x24>
    		setFailureSign();
 8001058:	46a4      	mov	ip, r4
 800105a:	f7ff ffc1 	bl	8000fe0 <setFailureSign.8180>
    		failure++;
 800105e:	6823      	ldr	r3, [r4, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	6023      	str	r3, [r4, #0]
    }
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09a      	sub	sp, #104	; 0x68
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f007 ff24 	bl	8008ec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <SystemClock_Config+0x100>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a30      	ldr	r2, [pc, #192]	; (800116c <SystemClock_Config+0x100>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <SystemClock_Config+0x100>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <SystemClock_Config+0x104>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <SystemClock_Config+0x104>)
 80010c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <SystemClock_Config+0x104>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010da:	2301      	movs	r3, #1
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e4:	2302      	movs	r3, #2
 80010e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010ee:	2304      	movs	r3, #4
 80010f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010f2:	23c0      	movs	r3, #192	; 0xc0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f6:	2304      	movs	r3, #4
 80010f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80010fa:	2308      	movs	r3, #8
 80010fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fb2a 	bl	800475c <HAL_RCC_OscConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800110e:	f000 f831 	bl	8001174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001112:	230f      	movs	r3, #15
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001116:	2302      	movs	r3, #2
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112c:	2103      	movs	r1, #3
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fe3c 	bl	8004dac <HAL_RCC_ClockConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800113a:	f000 f81b 	bl	8001174 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800113e:	2301      	movs	r3, #1
 8001140:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001142:	23c8      	movs	r3, #200	; 0xc8
 8001144:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001146:	2305      	movs	r3, #5
 8001148:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	4618      	mov	r0, r3
 8001154:	f004 f8ba 	bl	80052cc <HAL_RCCEx_PeriphCLKConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800115e:	f000 f809 	bl	8001174 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3768      	adds	r7, #104	; 0x68
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40007000 	.word	0x40007000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>

0800117e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MX_SPI1_Init+0x64>)
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <MX_SPI1_Init+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011cc:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	; (80011f8 <MX_SPI1_Init+0x64>)
 80011e6:	f004 fae5 	bl	80057b4 <HAL_SPI_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f0:	f7ff ffc0 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001a0 	.word	0x200001a0
 80011fc:	40013000 	.word	0x40013000

08001200 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_SPI_MspInit+0x84>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12b      	bne.n	800127a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_SPI_MspInit+0x88>)
 800122c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_SPI_MspInit+0x88>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800125a:	23e0      	movs	r3, #224	; 0xe0
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126a:	2305      	movs	r3, #5
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <HAL_SPI_MspInit+0x8c>)
 8001276:	f000 faaf 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	; 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40013000 	.word	0x40013000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <HAL_MspInit+0x4c>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	; 0x44
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <HAL_MspInit+0x4c>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	6413      	str	r3, [r2, #64]	; 0x40
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012ce:	2007      	movs	r0, #7
 80012d0:	f000 fa12 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 f8d0 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <OTG_FS_IRQHandler+0x10>)
 800133a:	f000 ffdf 	bl	80022fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200005d4 	.word	0x200005d4

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f007 fd6c 	bl	8008e54 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20020000 	.word	0x20020000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	200008e8 	.word	0x200008e8

080013b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f007 fd2b 	bl	8008e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800140a:	f7ff fb19 	bl	8000a40 <main>
  bx  lr    
 800140e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800141c:	080092a8 	.word	0x080092a8
  ldr r2, =_sbss
 8001420:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001424:	200008e8 	.word	0x200008e8

08001428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_Init+0x40>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_Init+0x40>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_Init+0x40>)
 8001442:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_Init+0x40>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_Init+0x40>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f000 f94f 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f808 	bl	8001470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001460:	f7ff ff16 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40023c00 	.word	0x40023c00

08001470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_InitTick+0x54>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <HAL_InitTick+0x58>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f996 	bl	80017c0 <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f000 f944 	bl	8001738 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	; (80014cc <HAL_InitTick+0x5c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000000 	.word	0x20000000
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000004 	.word	0x20000004

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	200001f8 	.word	0x200001f8

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200001f8 	.word	0x200001f8

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008

08001558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001574:	4013      	ands	r3, r2
 8001576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <__NVIC_SetPriorityGrouping+0x44>)
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	60d3      	str	r3, [r2, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <__NVIC_GetPriorityGrouping+0x18>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	0a1b      	lsrs	r3, r3, #8
 80015aa:	f003 0307 	and.w	r3, r3, #7
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	db0b      	blt.n	80015e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	f003 021f 	and.w	r2, r3, #31
 80015d4:	4907      	ldr	r1, [pc, #28]	; (80015f4 <__NVIC_EnableIRQ+0x38>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2001      	movs	r0, #1
 80015de:	fa00 f202 	lsl.w	r2, r0, r2
 80015e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
	...

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff8e 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d00f      	beq.n	8001726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b06      	cmp	r3, #6
 800170a:	d00c      	beq.n	8001726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b05      	cmp	r3, #5
 8001710:	d009      	beq.n	8001726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b04      	cmp	r3, #4
 8001716:	d006      	beq.n	8001726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b03      	cmp	r3, #3
 800171c:	d003      	beq.n	8001726 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800171e:	2192      	movs	r1, #146	; 0x92
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001722:	f7ff fd2c 	bl	800117e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ff16 	bl	8001558 <__NVIC_SetPriorityGrouping>
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	080090b0 	.word	0x080090b0

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d903      	bls.n	8001758 <HAL_NVIC_SetPriority+0x20>
 8001750:	21aa      	movs	r1, #170	; 0xaa
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <HAL_NVIC_SetPriority+0x54>)
 8001754:	f7ff fd13 	bl	800117e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d903      	bls.n	8001766 <HAL_NVIC_SetPriority+0x2e>
 800175e:	21ab      	movs	r1, #171	; 0xab
 8001760:	480a      	ldr	r0, [pc, #40]	; (800178c <HAL_NVIC_SetPriority+0x54>)
 8001762:	f7ff fd0c 	bl	800117e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001766:	f7ff ff1b 	bl	80015a0 <__NVIC_GetPriorityGrouping>
 800176a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	6978      	ldr	r0, [r7, #20]
 8001772:	f7ff ff6b 	bl	800164c <NVIC_EncodePriority>
 8001776:	4602      	mov	r2, r0
 8001778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff3a 	bl	80015f8 <__NVIC_SetPriority>
}
 8001784:	bf00      	nop
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	080090b0 	.word	0x080090b0

08001790 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da03      	bge.n	80017aa <HAL_NVIC_EnableIRQ+0x1a>
 80017a2:	21be      	movs	r1, #190	; 0xbe
 80017a4:	4805      	ldr	r0, [pc, #20]	; (80017bc <HAL_NVIC_EnableIRQ+0x2c>)
 80017a6:	f7ff fcea 	bl	800117e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff04 	bl	80015bc <__NVIC_EnableIRQ>
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	080090b0 	.word	0x080090b0

080017c0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff73 	bl	80016b4 <SysTick_Config>
 80017ce:	4603      	mov	r3, r0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a33      	ldr	r2, [pc, #204]	; (80018c0 <HAL_GPIO_Init+0xe8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d017      	beq.n	8001826 <HAL_GPIO_Init+0x4e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a32      	ldr	r2, [pc, #200]	; (80018c4 <HAL_GPIO_Init+0xec>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d013      	beq.n	8001826 <HAL_GPIO_Init+0x4e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <HAL_GPIO_Init+0xf0>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00f      	beq.n	8001826 <HAL_GPIO_Init+0x4e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <HAL_GPIO_Init+0xf4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00b      	beq.n	8001826 <HAL_GPIO_Init+0x4e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <HAL_GPIO_Init+0xf8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x4e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a2e      	ldr	r2, [pc, #184]	; (80018d4 <HAL_GPIO_Init+0xfc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x4e>
 800181e:	21ac      	movs	r1, #172	; 0xac
 8001820:	482d      	ldr	r0, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x100>)
 8001822:	f7ff fcac 	bl	800117e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_GPIO_Init+0x64>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	041b      	lsls	r3, r3, #16
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x6c>
 800183c:	21ad      	movs	r1, #173	; 0xad
 800183e:	4826      	ldr	r0, [pc, #152]	; (80018d8 <HAL_GPIO_Init+0x100>)
 8001840:	f7ff fc9d 	bl	800117e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d035      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d031      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b11      	cmp	r3, #17
 800185a:	d02d      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b02      	cmp	r3, #2
 8001862:	d029      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d025      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001874:	d020      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800187e:	d01b      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001888:	d016      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001892:	d011      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800189c:	d00c      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80018a6:	d007      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0xe0>
 80018b0:	21ae      	movs	r1, #174	; 0xae
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <HAL_GPIO_Init+0x100>)
 80018b4:	f7ff fc63 	bl	800117e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	61fb      	str	r3, [r7, #28]
 80018bc:	e211      	b.n	8001ce2 <HAL_GPIO_Init+0x50a>
 80018be:	bf00      	nop
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020400 	.word	0x40020400
 80018c8:	40020800 	.word	0x40020800
 80018cc:	40020c00 	.word	0x40020c00
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40021c00 	.word	0x40021c00
 80018d8:	080090ec 	.word	0x080090ec
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f040 81f1 	bne.w	8001cdc <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b01      	cmp	r3, #1
 8001904:	d005      	beq.n	8001912 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190e:	2b02      	cmp	r3, #2
 8001910:	d144      	bne.n	800199c <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00f      	beq.n	800193a <HAL_GPIO_Init+0x162>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d00b      	beq.n	800193a <HAL_GPIO_Init+0x162>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x162>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b03      	cmp	r3, #3
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x162>
 8001932:	21c0      	movs	r1, #192	; 0xc0
 8001934:	489f      	ldr	r0, [pc, #636]	; (8001bb4 <HAL_GPIO_Init+0x3dc>)
 8001936:	f7ff fc22 	bl	800117e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	2203      	movs	r2, #3
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001970:	2201      	movs	r2, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0201 	and.w	r2, r3, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d027      	beq.n	80019f8 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00b      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019c0:	21d1      	movs	r1, #209	; 0xd1
 80019c2:	487c      	ldr	r0, [pc, #496]	; (8001bb4 <HAL_GPIO_Init+0x3dc>)
 80019c4:	f7ff fbdb 	bl	800117e <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	f040 80a0 	bne.w	8001b46 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d077      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	2b09      	cmp	r3, #9
 8001a14:	d073      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d06f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d067      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d063      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d05f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d05b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d057      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d053      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d04f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d04b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d047      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d043      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d03f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d03b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	d037      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d033      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d02f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d02b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d027      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b07      	cmp	r3, #7
 8001ab4:	d023      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b07      	cmp	r3, #7
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	2b07      	cmp	r3, #7
 8001ac4:	d01b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d017      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	2b09      	cmp	r3, #9
 8001adc:	d00f      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d00b      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x326>
 8001af6:	21de      	movs	r1, #222	; 0xde
 8001af8:	482e      	ldr	r0, [pc, #184]	; (8001bb4 <HAL_GPIO_Init+0x3dc>)
 8001afa:	f7ff fb40 	bl	800117e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0203 	and.w	r2, r3, #3
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80aa 	beq.w	8001cdc <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_GPIO_Init+0x3e0>)
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_GPIO_Init+0x3e0>)
 8001b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b96:	6453      	str	r3, [r2, #68]	; 0x44
 8001b98:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <HAL_GPIO_Init+0x3e0>)
 8001b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba4:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <HAL_GPIO_Init+0x3e4>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x3e8>
 8001bb2:	bf00      	nop
 8001bb4:	080090ec 	.word	0x080090ec
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	220f      	movs	r2, #15
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_GPIO_Init+0x51c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d019      	beq.n	8001c14 <HAL_GPIO_Init+0x43c>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_GPIO_Init+0x520>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d013      	beq.n	8001c10 <HAL_GPIO_Init+0x438>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a44      	ldr	r2, [pc, #272]	; (8001cfc <HAL_GPIO_Init+0x524>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_GPIO_Init+0x434>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a43      	ldr	r2, [pc, #268]	; (8001d00 <HAL_GPIO_Init+0x528>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d007      	beq.n	8001c08 <HAL_GPIO_Init+0x430>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a42      	ldr	r2, [pc, #264]	; (8001d04 <HAL_GPIO_Init+0x52c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_GPIO_Init+0x42c>
 8001c00:	2304      	movs	r3, #4
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x43e>
 8001c04:	2307      	movs	r3, #7
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x43e>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x43e>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x43e>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x43e>
 8001c14:	2300      	movs	r3, #0
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c26:	4938      	ldr	r1, [pc, #224]	; (8001d08 <HAL_GPIO_Init+0x530>)
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c34:	4b35      	ldr	r3, [pc, #212]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c58:	4a2c      	ldr	r2, [pc, #176]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c82:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c88:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cac:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cb2:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_GPIO_Init+0x534>)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	2b0f      	cmp	r3, #15
 8001ce6:	f67f adf9 	bls.w	80018dc <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	3720      	adds	r7, #32
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40020000 	.word	0x40020000
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40020800 	.word	0x40020800
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40013c00 	.word	0x40013c00

08001d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001d1c:	887b      	ldrh	r3, [r7, #2]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d004      	beq.n	8001d2c <HAL_GPIO_ReadPin+0x1c>
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	041b      	lsls	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_GPIO_ReadPin+0x26>
 8001d2c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001d30:	4809      	ldr	r0, [pc, #36]	; (8001d58 <HAL_GPIO_ReadPin+0x48>)
 8001d32:	f7ff fa24 	bl	800117e <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	887b      	ldrh	r3, [r7, #2]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
 8001d46:	e001      	b.n	8001d4c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	080090ec 	.word	0x080090ec

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001d6c:	887b      	ldrh	r3, [r7, #2]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <HAL_GPIO_WritePin+0x20>
 8001d72:	887b      	ldrh	r3, [r7, #2]
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d004      	beq.n	8001d86 <HAL_GPIO_WritePin+0x2a>
 8001d7c:	f240 119d 	movw	r1, #413	; 0x19d
 8001d80:	480e      	ldr	r0, [pc, #56]	; (8001dbc <HAL_GPIO_WritePin+0x60>)
 8001d82:	f7ff f9fc 	bl	800117e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001d86:	787b      	ldrb	r3, [r7, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_WritePin+0x40>
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d004      	beq.n	8001d9c <HAL_GPIO_WritePin+0x40>
 8001d92:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_GPIO_WritePin+0x60>)
 8001d98:	f7ff f9f1 	bl	800117e <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da8:	e003      	b.n	8001db2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	080090ec 	.word	0x080090ec

08001dc0 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_GPIO_TogglePin+0x1c>
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	0c1b      	lsrs	r3, r3, #16
 8001dd6:	041b      	lsls	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <HAL_GPIO_TogglePin+0x26>
 8001ddc:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <HAL_GPIO_TogglePin+0x4c>)
 8001de2:	f7ff f9cc 	bl	800117e <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dec:	887a      	ldrh	r2, [r7, #2]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4013      	ands	r3, r2
 8001df2:	041a      	lsls	r2, r3, #16
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	43d9      	mvns	r1, r3
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	080090ec 	.word	0x080090ec

08001e10 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	b08f      	sub	sp, #60	; 0x3c
 8001e14:	af0a      	add	r7, sp, #40	; 0x28
 8001e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e05d      	b.n	8001ede <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e2a:	d003      	beq.n	8001e34 <HAL_HCD_Init+0x24>
 8001e2c:	2179      	movs	r1, #121	; 0x79
 8001e2e:	482e      	ldr	r0, [pc, #184]	; (8001ee8 <HAL_HCD_Init+0xd8>)
 8001e30:	f7ff f9a5 	bl	800117e <assert_failed>

  USBx = hhcd->Instance;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f006 fd56 	bl	8008900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2203      	movs	r2, #3
 8001e58:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 feac 	bl	8005bd0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	687e      	ldr	r6, [r7, #4]
 8001e80:	466d      	mov	r5, sp
 8001e82:	f106 0410 	add.w	r4, r6, #16
 8001e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e96:	1d33      	adds	r3, r6, #4
 8001e98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9a:	6838      	ldr	r0, [r7, #0]
 8001e9c:	f003 fe26 	bl	8005aec <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fea3 	bl	8005bf2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	687e      	ldr	r6, [r7, #4]
 8001eb4:	466d      	mov	r5, sp
 8001eb6:	f106 0410 	add.w	r4, r6, #16
 8001eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eca:	1d33      	adds	r3, r6, #4
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	6838      	ldr	r0, [r7, #0]
 8001ed0:	f004 f80a 	bl	8005ee8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	08009128 	.word	0x08009128

08001eec <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af04      	add	r7, sp, #16
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4608      	mov	r0, r1
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	70fb      	strb	r3, [r7, #3]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70bb      	strb	r3, [r7, #2]
 8001f02:	4613      	mov	r3, r2
 8001f04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_HCD_HC_Init+0x28>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e076      	b.n	8002002 <HAL_HCD_HC_Init+0x116>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	212c      	movs	r1, #44	; 0x2c
 8001f22:	fb01 f303 	mul.w	r3, r1, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	333d      	adds	r3, #61	; 0x3d
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3338      	adds	r3, #56	; 0x38
 8001f3c:	787a      	ldrb	r2, [r7, #1]
 8001f3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3340      	adds	r3, #64	; 0x40
 8001f4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f50:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3339      	adds	r3, #57	; 0x39
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	212c      	movs	r1, #44	; 0x2c
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	333f      	adds	r3, #63	; 0x3f
 8001f72:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	78ba      	ldrb	r2, [r7, #2]
 8001f7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f80:	b2d0      	uxtb	r0, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	212c      	movs	r1, #44	; 0x2c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	333a      	adds	r3, #58	; 0x3a
 8001f8e:	4602      	mov	r2, r0
 8001f90:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da09      	bge.n	8001fae <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f9a:	78fb      	ldrb	r3, [r7, #3]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	212c      	movs	r1, #44	; 0x2c
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	333b      	adds	r3, #59	; 0x3b
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
 8001fac:	e008      	b.n	8001fc0 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fae:	78fb      	ldrb	r3, [r7, #3]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	333b      	adds	r3, #59	; 0x3b
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	333c      	adds	r3, #60	; 0x3c
 8001fce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fd2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6818      	ldr	r0, [r3, #0]
 8001fd8:	787c      	ldrb	r4, [r7, #1]
 8001fda:	78ba      	ldrb	r2, [r7, #2]
 8001fdc:	78f9      	ldrb	r1, [r7, #3]
 8001fde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4623      	mov	r3, r4
 8001ff0:	f004 f8f4 	bl	80061dc <USB_HC_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}

0800200a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	460b      	mov	r3, r1
 8002014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_HCD_HC_Halt+0x1e>
 8002024:	2302      	movs	r3, #2
 8002026:	e00f      	b.n	8002048 <HAL_HCD_HC_Halt+0x3e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f004 fb30 	bl	800669e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4603      	mov	r3, r0
 8002060:	70fb      	strb	r3, [r7, #3]
 8002062:	460b      	mov	r3, r1
 8002064:	70bb      	strb	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800206a:	78fb      	ldrb	r3, [r7, #3]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	333b      	adds	r3, #59	; 0x3b
 8002078:	78ba      	ldrb	r2, [r7, #2]
 800207a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	333f      	adds	r3, #63	; 0x3f
 800208a:	787a      	ldrb	r2, [r7, #1]
 800208c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800208e:	7c3b      	ldrb	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d112      	bne.n	80020ba <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3342      	adds	r3, #66	; 0x42
 80020a2:	2203      	movs	r2, #3
 80020a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	333d      	adds	r3, #61	; 0x3d
 80020b4:	7f3a      	ldrb	r2, [r7, #28]
 80020b6:	701a      	strb	r2, [r3, #0]
 80020b8:	e008      	b.n	80020cc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3342      	adds	r3, #66	; 0x42
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020cc:	787b      	ldrb	r3, [r7, #1]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	f200 80c6 	bhi.w	8002260 <HAL_HCD_HC_SubmitRequest+0x210>
 80020d4:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020da:	bf00      	nop
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	0800224d 	.word	0x0800224d
 80020e4:	08002151 	.word	0x08002151
 80020e8:	080021cf 	.word	0x080021cf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020ec:	7c3b      	ldrb	r3, [r7, #16]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 80b8 	bne.w	8002264 <HAL_HCD_HC_SubmitRequest+0x214>
 80020f4:	78bb      	ldrb	r3, [r7, #2]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 80b4 	bne.w	8002264 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020fc:	8b3b      	ldrh	r3, [r7, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	212c      	movs	r1, #44	; 0x2c
 8002108:	fb01 f303 	mul.w	r3, r1, r3
 800210c:	4413      	add	r3, r2
 800210e:	3355      	adds	r3, #85	; 0x55
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	212c      	movs	r1, #44	; 0x2c
 800211a:	fb01 f303 	mul.w	r3, r1, r3
 800211e:	4413      	add	r3, r2
 8002120:	3355      	adds	r3, #85	; 0x55
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3342      	adds	r3, #66	; 0x42
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800213a:	e093      	b.n	8002264 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	3342      	adds	r3, #66	; 0x42
 800214a:	2202      	movs	r2, #2
 800214c:	701a      	strb	r2, [r3, #0]
      break;
 800214e:	e089      	b.n	8002264 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11d      	bne.n	8002192 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3355      	adds	r3, #85	; 0x55
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3342      	adds	r3, #66	; 0x42
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800217c:	e073      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	212c      	movs	r1, #44	; 0x2c
 8002184:	fb01 f303 	mul.w	r3, r1, r3
 8002188:	4413      	add	r3, r2
 800218a:	3342      	adds	r3, #66	; 0x42
 800218c:	2202      	movs	r2, #2
 800218e:	701a      	strb	r2, [r3, #0]
      break;
 8002190:	e069      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3354      	adds	r3, #84	; 0x54
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	212c      	movs	r1, #44	; 0x2c
 80021ac:	fb01 f303 	mul.w	r3, r1, r3
 80021b0:	4413      	add	r3, r2
 80021b2:	3342      	adds	r3, #66	; 0x42
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
      break;
 80021b8:	e055      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3342      	adds	r3, #66	; 0x42
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
      break;
 80021cc:	e04b      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021ce:	78bb      	ldrb	r3, [r7, #2]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11d      	bne.n	8002210 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	212c      	movs	r1, #44	; 0x2c
 80021da:	fb01 f303 	mul.w	r3, r1, r3
 80021de:	4413      	add	r3, r2
 80021e0:	3355      	adds	r3, #85	; 0x55
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	212c      	movs	r1, #44	; 0x2c
 80021ee:	fb01 f303 	mul.w	r3, r1, r3
 80021f2:	4413      	add	r3, r2
 80021f4:	3342      	adds	r3, #66	; 0x42
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021fa:	e034      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3342      	adds	r3, #66	; 0x42
 800220a:	2202      	movs	r2, #2
 800220c:	701a      	strb	r2, [r3, #0]
      break;
 800220e:	e02a      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	212c      	movs	r1, #44	; 0x2c
 8002216:	fb01 f303 	mul.w	r3, r1, r3
 800221a:	4413      	add	r3, r2
 800221c:	3354      	adds	r3, #84	; 0x54
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	212c      	movs	r1, #44	; 0x2c
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	4413      	add	r3, r2
 8002230:	3342      	adds	r3, #66	; 0x42
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
      break;
 8002236:	e016      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3342      	adds	r3, #66	; 0x42
 8002246:	2202      	movs	r2, #2
 8002248:	701a      	strb	r2, [r3, #0]
      break;
 800224a:	e00c      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	212c      	movs	r1, #44	; 0x2c
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4413      	add	r3, r2
 8002258:	3342      	adds	r3, #66	; 0x42
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
      break;
 800225e:	e002      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002260:	bf00      	nop
 8002262:	e000      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002264:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	212c      	movs	r1, #44	; 0x2c
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	4413      	add	r3, r2
 8002272:	3344      	adds	r3, #68	; 0x44
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	8b3a      	ldrh	r2, [r7, #24]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	fb00 f303 	mul.w	r3, r0, r3
 8002284:	440b      	add	r3, r1
 8002286:	334c      	adds	r3, #76	; 0x4c
 8002288:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3350      	adds	r3, #80	; 0x50
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3339      	adds	r3, #57	; 0x39
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3361      	adds	r3, #97	; 0x61
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	222c      	movs	r2, #44	; 0x2c
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	3338      	adds	r3, #56	; 0x38
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	18d1      	adds	r1, r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	f004 f884 	bl	80063f8 <USB_HC_StartXfer>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop

080022fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fda7 	bl	8005e66 <USB_GetMode>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	f040 80f6 	bne.w	800250c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fd8b 	bl	8005e40 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80ec 	beq.w	800250a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fd82 	bl	8005e40 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002346:	d104      	bne.n	8002352 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fd72 	bl	8005e40 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002366:	d104      	bne.n	8002372 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002370:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 fd62 	bl	8005e40 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002386:	d104      	bne.n	8002392 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002390:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f003 fd52 	bl	8005e40 <USB_ReadInterrupts>
 800239c:	4603      	mov	r3, r0
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d103      	bne.n	80023ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2202      	movs	r2, #2
 80023ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 fd44 	bl	8005e40 <USB_ReadInterrupts>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023c2:	d11c      	bne.n	80023fe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10f      	bne.n	80023fe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023de:	2110      	movs	r1, #16
 80023e0:	6938      	ldr	r0, [r7, #16]
 80023e2:	f003 fc53 	bl	8005c8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023e6:	6938      	ldr	r0, [r7, #16]
 80023e8:	f003 fc74 	bl	8005cd4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fe2c 	bl	8006050 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 faff 	bl	80089fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f003 fd1c 	bl	8005e40 <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002412:	d102      	bne.n	800241a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 fa03 	bl	8003820 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f003 fd0e 	bl	8005e40 <USB_ReadInterrupts>
 8002424:	4603      	mov	r3, r0
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b08      	cmp	r3, #8
 800242c:	d106      	bne.n	800243c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f006 fac8 	bl	80089c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f003 fcfd 	bl	8005e40 <USB_ReadInterrupts>
 8002446:	4603      	mov	r3, r0
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b10      	cmp	r3, #16
 800244e:	d101      	bne.n	8002454 <HAL_HCD_IRQHandler+0x158>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_HCD_IRQHandler+0x15a>
 8002454:	2300      	movs	r3, #0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d012      	beq.n	8002480 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0210 	bic.w	r2, r2, #16
 8002468:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f001 f906 	bl	800367c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0210 	orr.w	r2, r2, #16
 800247e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 fcdb 	bl	8005e40 <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002490:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002494:	d13a      	bne.n	800250c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f004 f8ee 	bl	800667c <USB_HC_ReadInterrupt>
 80024a0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e025      	b.n	80024f4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d018      	beq.n	80024ee <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d2:	d106      	bne.n	80024e2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	4619      	mov	r1, r3
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8ab 	bl	8002636 <HCD_HC_IN_IRQHandler>
 80024e0:	e005      	b.n	80024ee <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fcc6 	bl	8002e7a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d3d4      	bcc.n	80024a8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	e000      	b.n	800250c <HAL_HCD_IRQHandler+0x210>
      return;
 800250a:	bf00      	nop
    }
  }
}
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_HCD_Start+0x16>
 8002524:	2302      	movs	r3, #2
 8002526:	e013      	b.n	8002550 <HAL_HCD_Start+0x3e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fdee 	bl	8006118 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fb34 	bl	8005bae <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_HCD_Stop+0x16>
 800256a:	2302      	movs	r3, #2
 800256c:	e00d      	b.n	800258a <HAL_HCD_Stop+0x32>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f004 f9e8 	bl	8006950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fd90 	bl	80060c4 <USB_ResetPort>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	212c      	movs	r1, #44	; 0x2c
 80025c0:	fb01 f303 	mul.w	r3, r1, r3
 80025c4:	4413      	add	r3, r2
 80025c6:	3360      	adds	r3, #96	; 0x60
 80025c8:	781b      	ldrb	r3, [r3, #0]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3350      	adds	r3, #80	; 0x50
 80025f0:	681b      	ldr	r3, [r3, #0]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fdd4 	bl	80061b8 <USB_GetCurrentFrame>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fdaf 	bl	800618a <USB_GetHostSpeed>
 800262c:	4603      	mov	r3, r0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b086      	sub	sp, #24
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b04      	cmp	r3, #4
 8002664:	d119      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4413      	add	r3, r2
 800266e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002672:	461a      	mov	r2, r3
 8002674:	2304      	movs	r3, #4
 8002676:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	0151      	lsls	r1, r2, #5
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	440a      	add	r2, r1
 800268e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002692:	f043 0302 	orr.w	r3, r3, #2
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e101      	b.n	800289e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b0:	d12b      	bne.n	800270a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	461a      	mov	r2, r3
 80026c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3361      	adds	r3, #97	; 0x61
 80026d4:	2207      	movs	r2, #7
 80026d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026f2:	f043 0302 	orr.w	r3, r3, #2
 80026f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f003 ffcb 	bl	800669e <USB_HC_Halt>
 8002708:	e0c9      	b.n	800289e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b20      	cmp	r3, #32
 800271e:	d109      	bne.n	8002734 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2320      	movs	r3, #32
 8002730:	6093      	str	r3, [r2, #8]
 8002732:	e0b4      	b.n	800289e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4413      	add	r3, r2
 800273c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b08      	cmp	r3, #8
 8002748:	d133      	bne.n	80027b2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	0151      	lsls	r1, r2, #5
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	440a      	add	r2, r1
 8002760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	3361      	adds	r3, #97	; 0x61
 8002778:	2205      	movs	r2, #5
 800277a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	461a      	mov	r2, r3
 800278a:	2310      	movs	r3, #16
 800278c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	2308      	movs	r3, #8
 800279e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f003 ff77 	bl	800669e <USB_HC_Halt>
 80027b0:	e075      	b.n	800289e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	015a      	lsls	r2, r3, #5
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4413      	add	r3, r2
 80027ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c8:	d134      	bne.n	8002834 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	0151      	lsls	r1, r2, #5
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	440a      	add	r2, r1
 80027e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3361      	adds	r3, #97	; 0x61
 80027f8:	2208      	movs	r2, #8
 80027fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2310      	movs	r3, #16
 800280c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	461a      	mov	r2, r3
 800281c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002820:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f003 ff36 	bl	800669e <USB_HC_Halt>
 8002832:	e034      	b.n	800289e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002846:	2b80      	cmp	r3, #128	; 0x80
 8002848:	d129      	bne.n	800289e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	0151      	lsls	r1, r2, #5
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	440a      	add	r2, r1
 8002860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3361      	adds	r3, #97	; 0x61
 8002878:	2206      	movs	r2, #6
 800287a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f003 ff09 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	461a      	mov	r2, r3
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b4:	d122      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	0151      	lsls	r1, r2, #5
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	440a      	add	r2, r1
 80028cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f003 fedc 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	461a      	mov	r2, r3
 80028f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028f8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80028fa:	e2ba      	b.n	8002e72 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	f040 811b 	bne.w	8002b4a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d019      	beq.n	8002950 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3348      	adds	r3, #72	; 0x48
 800292a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0159      	lsls	r1, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	440b      	add	r3, r1
 8002934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800293e:	1ad2      	subs	r2, r2, r3
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	202c      	movs	r0, #44	; 0x2c
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	440b      	add	r3, r1
 800294c:	3350      	adds	r3, #80	; 0x50
 800294e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3361      	adds	r3, #97	; 0x61
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	335c      	adds	r3, #92	; 0x5c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2301      	movs	r3, #1
 8002984:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	333f      	adds	r3, #63	; 0x3f
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	333f      	adds	r3, #63	; 0x3f
 80029a8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d121      	bne.n	80029f2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f003 fe60 	bl	800669e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	2310      	movs	r3, #16
 80029ee:	6093      	str	r3, [r2, #8]
 80029f0:	e066      	b.n	8002ac0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333f      	adds	r3, #63	; 0x3f
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d127      	bne.n	8002a56 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	015a      	lsls	r2, r3, #5
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	0151      	lsls	r1, r2, #5
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a24:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	b2d9      	uxtb	r1, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	202c      	movs	r0, #44	; 0x2c
 8002a42:	fb00 f303 	mul.w	r3, r0, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	3360      	adds	r3, #96	; 0x60
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f005 ffe2 	bl	8008a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a54:	e034      	b.n	8002ac0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	333f      	adds	r3, #63	; 0x3f
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d12a      	bne.n	8002ac0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	212c      	movs	r1, #44	; 0x2c
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	3360      	adds	r3, #96	; 0x60
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3354      	adds	r3, #84	; 0x54
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2d8      	uxtb	r0, r3
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3354      	adds	r3, #84	; 0x54
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	b2d9      	uxtb	r1, r3
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	202c      	movs	r0, #44	; 0x2c
 8002aae:	fb00 f303 	mul.w	r3, r0, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3360      	adds	r3, #96	; 0x60
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f005 ffac 	bl	8008a18 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d12b      	bne.n	8002b20 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3348      	adds	r3, #72	; 0x48
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	202c      	movs	r0, #44	; 0x2c
 8002ade:	fb00 f202 	mul.w	r2, r0, r2
 8002ae2:	440a      	add	r2, r1
 8002ae4:	3240      	adds	r2, #64	; 0x40
 8002ae6:	8812      	ldrh	r2, [r2, #0]
 8002ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 81be 	beq.w	8002e72 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	3354      	adds	r3, #84	; 0x54
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f083 0301 	eor.w	r3, r3, #1
 8002b0a:	b2d8      	uxtb	r0, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3354      	adds	r3, #84	; 0x54
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	701a      	strb	r2, [r3, #0]
}
 8002b1e:	e1a8      	b.n	8002e72 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3354      	adds	r3, #84	; 0x54
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2d8      	uxtb	r0, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	212c      	movs	r1, #44	; 0x2c
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3354      	adds	r3, #84	; 0x54
 8002b44:	4602      	mov	r2, r0
 8002b46:	701a      	strb	r2, [r3, #0]
}
 8002b48:	e193      	b.n	8002e72 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	f040 8106 	bne.w	8002d6e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	0151      	lsls	r1, r2, #5
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	440a      	add	r2, r1
 8002b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b7c:	f023 0302 	bic.w	r3, r3, #2
 8002b80:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3361      	adds	r3, #97	; 0x61
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d109      	bne.n	8002baa <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3360      	adds	r3, #96	; 0x60
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e0c9      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	212c      	movs	r1, #44	; 0x2c
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3361      	adds	r3, #97	; 0x61
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d109      	bne.n	8002bd2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3360      	adds	r3, #96	; 0x60
 8002bcc:	2205      	movs	r2, #5
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e0b5      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3361      	adds	r3, #97	; 0x61
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d009      	beq.n	8002bfa <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3361      	adds	r3, #97	; 0x61
 8002bf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d150      	bne.n	8002c9c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	335c      	adds	r3, #92	; 0x5c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	202c      	movs	r0, #44	; 0x2c
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	440b      	add	r3, r1
 8002c18:	335c      	adds	r3, #92	; 0x5c
 8002c1a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	335c      	adds	r3, #92	; 0x5c
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d912      	bls.n	8002c56 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	335c      	adds	r3, #92	; 0x5c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	212c      	movs	r1, #44	; 0x2c
 8002c48:	fb01 f303 	mul.w	r3, r1, r3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3360      	adds	r3, #96	; 0x60
 8002c50:	2204      	movs	r2, #4
 8002c52:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c54:	e073      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	212c      	movs	r1, #44	; 0x2c
 8002c5c:	fb01 f303 	mul.w	r3, r1, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	3360      	adds	r3, #96	; 0x60
 8002c64:	2202      	movs	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c9a:	e050      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3361      	adds	r3, #97	; 0x61
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d122      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3360      	adds	r3, #96	; 0x60
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e023      	b.n	8002d3e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3361      	adds	r3, #97	; 0x61
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b07      	cmp	r3, #7
 8002d08:	d119      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	335c      	adds	r3, #92	; 0x5c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	202c      	movs	r0, #44	; 0x2c
 8002d22:	fb00 f303 	mul.w	r3, r0, r3
 8002d26:	440b      	add	r3, r1
 8002d28:	335c      	adds	r3, #92	; 0x5c
 8002d2a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3360      	adds	r3, #96	; 0x60
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	b2d9      	uxtb	r1, r3
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	202c      	movs	r0, #44	; 0x2c
 8002d5a:	fb00 f303 	mul.w	r3, r0, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3360      	adds	r3, #96	; 0x60
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f005 fe56 	bl	8008a18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d6c:	e081      	b.n	8002e72 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d176      	bne.n	8002e72 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	333f      	adds	r3, #63	; 0x3f
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d121      	bne.n	8002ddc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	335c      	adds	r3, #92	; 0x5c
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	0151      	lsls	r1, r2, #5
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	440a      	add	r2, r1
 8002dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f003 fc62 	bl	800669e <USB_HC_Halt>
 8002dda:	e041      	b.n	8002e60 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	333f      	adds	r3, #63	; 0x3f
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d009      	beq.n	8002e04 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	212c      	movs	r1, #44	; 0x2c
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	333f      	adds	r3, #63	; 0x3f
 8002dfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d12d      	bne.n	8002e60 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	335c      	adds	r3, #92	; 0x5c
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d120      	bne.n	8002e60 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3361      	adds	r3, #97	; 0x61
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	0151      	lsls	r1, r2, #5
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	440a      	add	r2, r1
 8002e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f003 fc1f 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2310      	movs	r3, #16
 8002e70:	6093      	str	r3, [r2, #8]
}
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d119      	bne.n	8002ede <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2304      	movs	r3, #4
 8002eba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002edc:	e3ca      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d13e      	bne.n	8002f72 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	2320      	movs	r3, #32
 8002f04:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	333d      	adds	r3, #61	; 0x3d
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	f040 83ac 	bne.w	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	333d      	adds	r3, #61	; 0x3d
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	212c      	movs	r1, #44	; 0x2c
 8002f34:	fb01 f303 	mul.w	r3, r1, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3360      	adds	r3, #96	; 0x60
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	0151      	lsls	r1, r2, #5
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	440a      	add	r2, r1
 8002f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f003 fb97 	bl	800669e <USB_HC_Halt>
}
 8002f70:	e380      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f88:	d122      	bne.n	8002fd0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	0151      	lsls	r1, r2, #5
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	440a      	add	r2, r1
 8002fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f003 fb72 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fcc:	6093      	str	r3, [r2, #8]
}
 8002fce:	e351      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d150      	bne.n	8003088 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d111      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	333d      	adds	r3, #61	; 0x3d
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2340      	movs	r3, #64	; 0x40
 8003030:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	0151      	lsls	r1, r2, #5
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	440a      	add	r2, r1
 8003048:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fb1e 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306e:	461a      	mov	r2, r3
 8003070:	2301      	movs	r3, #1
 8003072:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3361      	adds	r3, #97	; 0x61
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
}
 8003086:	e2f5      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d13c      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3361      	adds	r3, #97	; 0x61
 80030ac:	2204      	movs	r2, #4
 80030ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	333d      	adds	r3, #61	; 0x3d
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	212c      	movs	r1, #44	; 0x2c
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	335c      	adds	r3, #92	; 0x5c
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	0151      	lsls	r1, r2, #5
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	440a      	add	r2, r1
 80030ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 facd 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	6093      	str	r3, [r2, #8]
}
 8003116:	e2ad      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b08      	cmp	r3, #8
 800312c:	d12a      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313a:	461a      	mov	r2, r3
 800313c:	2308      	movs	r3, #8
 800313e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	0151      	lsls	r1, r2, #5
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	440a      	add	r2, r1
 8003156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f003 fa97 	bl	800669e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	3361      	adds	r3, #97	; 0x61
 800317e:	2205      	movs	r2, #5
 8003180:	701a      	strb	r2, [r3, #0]
}
 8003182:	e277      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b10      	cmp	r3, #16
 8003198:	d150      	bne.n	800323c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	212c      	movs	r1, #44	; 0x2c
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	4413      	add	r3, r2
 80031a6:	335c      	adds	r3, #92	; 0x5c
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3361      	adds	r3, #97	; 0x61
 80031ba:	2203      	movs	r2, #3
 80031bc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	212c      	movs	r1, #44	; 0x2c
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	333d      	adds	r3, #61	; 0x3d
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d112      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	212c      	movs	r1, #44	; 0x2c
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	4413      	add	r3, r2
 80031de:	333c      	adds	r3, #60	; 0x3c
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d108      	bne.n	80031f8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	333d      	adds	r3, #61	; 0x3d
 80031f4:	2201      	movs	r2, #1
 80031f6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	0151      	lsls	r1, r2, #5
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	440a      	add	r2, r1
 800320e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003212:	f043 0302 	orr.w	r3, r3, #2
 8003216:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	b2d2      	uxtb	r2, r2
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f003 fa3b 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2310      	movs	r3, #16
 8003238:	6093      	str	r3, [r2, #8]
}
 800323a:	e21b      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d174      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d121      	bne.n	800329e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	212c      	movs	r1, #44	; 0x2c
 8003260:	fb01 f303 	mul.w	r3, r1, r3
 8003264:	4413      	add	r3, r2
 8003266:	3361      	adds	r3, #97	; 0x61
 8003268:	2206      	movs	r2, #6
 800326a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	0151      	lsls	r1, r2, #5
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	440a      	add	r2, r1
 8003282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003286:	f043 0302 	orr.w	r3, r3, #2
 800328a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f003 fa01 	bl	800669e <USB_HC_Halt>
 800329c:	e044      	b.n	8003328 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	212c      	movs	r1, #44	; 0x2c
 80032a4:	fb01 f303 	mul.w	r3, r1, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	335c      	adds	r3, #92	; 0x5c
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	202c      	movs	r0, #44	; 0x2c
 80032b6:	fb00 f303 	mul.w	r3, r0, r3
 80032ba:	440b      	add	r3, r1
 80032bc:	335c      	adds	r3, #92	; 0x5c
 80032be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	335c      	adds	r3, #92	; 0x5c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d920      	bls.n	8003316 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	212c      	movs	r1, #44	; 0x2c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	335c      	adds	r3, #92	; 0x5c
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3360      	adds	r3, #96	; 0x60
 80032f4:	2204      	movs	r2, #4
 80032f6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	b2d9      	uxtb	r1, r3
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	202c      	movs	r0, #44	; 0x2c
 8003302:	fb00 f303 	mul.w	r3, r0, r3
 8003306:	4413      	add	r3, r2
 8003308:	3360      	adds	r3, #96	; 0x60
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f005 fb82 	bl	8008a18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003314:	e008      	b.n	8003328 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	3360      	adds	r3, #96	; 0x60
 8003324:	2202      	movs	r2, #2
 8003326:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	461a      	mov	r2, r3
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	6093      	str	r3, [r2, #8]
}
 800333a:	e19b      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d134      	bne.n	80033be <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	0151      	lsls	r1, r2, #5
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	440a      	add	r2, r1
 800336a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800336e:	f043 0302 	orr.w	r3, r3, #2
 8003372:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f003 f98d 	bl	800669e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4413      	add	r3, r2
 800338c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003390:	461a      	mov	r2, r3
 8003392:	2310      	movs	r3, #16
 8003394:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3361      	adds	r3, #97	; 0x61
 80033b8:	2208      	movs	r2, #8
 80033ba:	701a      	strb	r2, [r3, #0]
}
 80033bc:	e15a      	b.n	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	f040 814f 	bne.w	8003674 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	0151      	lsls	r1, r2, #5
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	440a      	add	r2, r1
 80033ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3361      	adds	r3, #97	; 0x61
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d17d      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3360      	adds	r3, #96	; 0x60
 8003418:	2201      	movs	r2, #1
 800341a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	333f      	adds	r3, #63	; 0x3f
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b02      	cmp	r3, #2
 800342e:	d00a      	beq.n	8003446 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	333f      	adds	r3, #63	; 0x3f
 800343e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003440:	2b03      	cmp	r3, #3
 8003442:	f040 8100 	bne.w	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d113      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3355      	adds	r3, #85	; 0x55
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	f083 0301 	eor.w	r3, r3, #1
 8003462:	b2d8      	uxtb	r0, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3355      	adds	r3, #85	; 0x55
 8003472:	4602      	mov	r2, r0
 8003474:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b01      	cmp	r3, #1
 800347c:	f040 80e3 	bne.w	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	334c      	adds	r3, #76	; 0x4c
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80d8 	beq.w	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	334c      	adds	r3, #76	; 0x4c
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	202c      	movs	r0, #44	; 0x2c
 80034ac:	fb00 f202 	mul.w	r2, r0, r2
 80034b0:	440a      	add	r2, r1
 80034b2:	3240      	adds	r2, #64	; 0x40
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	3b01      	subs	r3, #1
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	202c      	movs	r0, #44	; 0x2c
 80034c0:	fb00 f202 	mul.w	r2, r0, r2
 80034c4:	440a      	add	r2, r1
 80034c6:	3240      	adds	r2, #64	; 0x40
 80034c8:	8812      	ldrh	r2, [r2, #0]
 80034ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80b5 	beq.w	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	212c      	movs	r1, #44	; 0x2c
 80034e2:	fb01 f303 	mul.w	r3, r1, r3
 80034e6:	4413      	add	r3, r2
 80034e8:	3355      	adds	r3, #85	; 0x55
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2d8      	uxtb	r0, r3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3355      	adds	r3, #85	; 0x55
 8003500:	4602      	mov	r2, r0
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e09f      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3361      	adds	r3, #97	; 0x61
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d109      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3360      	adds	r3, #96	; 0x60
 8003528:	2202      	movs	r2, #2
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e08b      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3361      	adds	r3, #97	; 0x61
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b04      	cmp	r3, #4
 8003540:	d109      	bne.n	8003556 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	3360      	adds	r3, #96	; 0x60
 8003550:	2202      	movs	r2, #2
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e077      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	3361      	adds	r3, #97	; 0x61
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b05      	cmp	r3, #5
 8003568:	d109      	bne.n	800357e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3360      	adds	r3, #96	; 0x60
 8003578:	2205      	movs	r2, #5
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e063      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	212c      	movs	r1, #44	; 0x2c
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	3361      	adds	r3, #97	; 0x61
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d009      	beq.n	80035a6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3361      	adds	r3, #97	; 0x61
 80035a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d14f      	bne.n	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	335c      	adds	r3, #92	; 0x5c
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	202c      	movs	r0, #44	; 0x2c
 80035be:	fb00 f303 	mul.w	r3, r0, r3
 80035c2:	440b      	add	r3, r1
 80035c4:	335c      	adds	r3, #92	; 0x5c
 80035c6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	335c      	adds	r3, #92	; 0x5c
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d912      	bls.n	8003602 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	335c      	adds	r3, #92	; 0x5c
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3360      	adds	r3, #96	; 0x60
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e021      	b.n	8003646 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	3360      	adds	r3, #96	; 0x60
 8003610:	2202      	movs	r2, #2
 8003612:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800362a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003632:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003640:	461a      	mov	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2302      	movs	r3, #2
 8003656:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	b2d9      	uxtb	r1, r3
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	202c      	movs	r0, #44	; 0x2c
 8003662:	fb00 f303 	mul.w	r3, r0, r3
 8003666:	4413      	add	r3, r2
 8003668:	3360      	adds	r3, #96	; 0x60
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f005 f9d2 	bl	8008a18 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003674:	bf00      	nop
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	0c5b      	lsrs	r3, r3, #17
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d004      	beq.n	80036c2 <HCD_RXQLVL_IRQHandler+0x46>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	f000 80a9 	beq.w	8003812 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80036c0:	e0aa      	b.n	8003818 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a6 	beq.w	8003816 <HCD_RXQLVL_IRQHandler+0x19a>
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	3344      	adds	r3, #68	; 0x44
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 809b 	beq.w	8003816 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	212c      	movs	r1, #44	; 0x2c
 80036e6:	fb01 f303 	mul.w	r3, r1, r3
 80036ea:	4413      	add	r3, r2
 80036ec:	3350      	adds	r3, #80	; 0x50
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	441a      	add	r2, r3
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	202c      	movs	r0, #44	; 0x2c
 80036fa:	fb00 f303 	mul.w	r3, r0, r3
 80036fe:	440b      	add	r3, r1
 8003700:	334c      	adds	r3, #76	; 0x4c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d87a      	bhi.n	80037fe <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3344      	adds	r3, #68	; 0x44
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	b292      	uxth	r2, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f002 fb35 	bl	8005d90 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	3344      	adds	r3, #68	; 0x44
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	441a      	add	r2, r3
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	202c      	movs	r0, #44	; 0x2c
 8003740:	fb00 f303 	mul.w	r3, r0, r3
 8003744:	440b      	add	r3, r1
 8003746:	3344      	adds	r3, #68	; 0x44
 8003748:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	3350      	adds	r3, #80	; 0x50
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	441a      	add	r2, r3
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	202c      	movs	r0, #44	; 0x2c
 8003764:	fb00 f303 	mul.w	r3, r0, r3
 8003768:	440b      	add	r3, r1
 800376a:	3350      	adds	r3, #80	; 0x50
 800376c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	4413      	add	r3, r2
 8003776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	0cdb      	lsrs	r3, r3, #19
 800377e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003782:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	3340      	adds	r3, #64	; 0x40
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4293      	cmp	r3, r2
 800379a:	d13c      	bne.n	8003816 <HCD_RXQLVL_IRQHandler+0x19a>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d039      	beq.n	8003816 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037b8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037c0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	6a3b      	ldr	r3, [r7, #32]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ce:	461a      	mov	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3354      	adds	r3, #84	; 0x54
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2d8      	uxtb	r0, r3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	212c      	movs	r1, #44	; 0x2c
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	4413      	add	r3, r2
 80037f6:	3354      	adds	r3, #84	; 0x54
 80037f8:	4602      	mov	r2, r0
 80037fa:	701a      	strb	r2, [r3, #0]
      break;
 80037fc:	e00b      	b.n	8003816 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	212c      	movs	r1, #44	; 0x2c
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	3360      	adds	r3, #96	; 0x60
 800380c:	2204      	movs	r2, #4
 800380e:	701a      	strb	r2, [r3, #0]
      break;
 8003810:	e001      	b.n	8003816 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003816:	bf00      	nop
  }
}
 8003818:	bf00      	nop
 800381a:	3728      	adds	r7, #40	; 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800384c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	d10b      	bne.n	8003870 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f005 f8bc 	bl	80089e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f043 0302 	orr.w	r3, r3, #2
 800386e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b08      	cmp	r3, #8
 8003878:	d132      	bne.n	80038e0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f043 0308 	orr.w	r3, r3, #8
 8003880:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b04      	cmp	r3, #4
 800388a:	d126      	bne.n	80038da <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d113      	bne.n	80038bc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800389a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800389e:	d106      	bne.n	80038ae <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2102      	movs	r1, #2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 fbd2 	bl	8006050 <USB_InitFSLSPClkSel>
 80038ac:	e011      	b.n	80038d2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 fbcb 	bl	8006050 <USB_InitFSLSPClkSel>
 80038ba:	e00a      	b.n	80038d2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ca:	461a      	mov	r2, r3
 80038cc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038d0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f005 f8ae 	bl	8008a34 <HAL_HCD_PortEnabled_Callback>
 80038d8:	e002      	b.n	80038e0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f005 f8b8 	bl	8008a50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d103      	bne.n	80038f2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	f043 0320 	orr.w	r3, r3, #32
 80038f0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1be      	b.n	8003c98 <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a9f      	ldr	r2, [pc, #636]	; (8003b9c <HAL_I2C_Init+0x294>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_I2C_Init+0x3a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a9d      	ldr	r2, [pc, #628]	; (8003ba0 <HAL_I2C_Init+0x298>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_I2C_Init+0x3a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a9c      	ldr	r2, [pc, #624]	; (8003ba4 <HAL_I2C_Init+0x29c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_I2C_Init+0x3a>
 8003938:	f240 11bf 	movw	r1, #447	; 0x1bf
 800393c:	489a      	ldr	r0, [pc, #616]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 800393e:	f7fd fc1e 	bl	800117e <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <HAL_I2C_Init+0x4c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4a97      	ldr	r2, [pc, #604]	; (8003bac <HAL_I2C_Init+0x2a4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d904      	bls.n	800395e <HAL_I2C_Init+0x56>
 8003954:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003958:	4893      	ldr	r0, [pc, #588]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 800395a:	f7fd fc10 	bl	800117e <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_I2C_Init+0x72>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396e:	d004      	beq.n	800397a <HAL_I2C_Init+0x72>
 8003970:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003974:	488c      	ldr	r0, [pc, #560]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 8003976:	f7fd fc02 	bl	800117e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_I2C_Init+0x8c>
 800398a:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800398e:	4886      	ldr	r0, [pc, #536]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 8003990:	f7fd fbf5 	bl	800117e <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399c:	d009      	beq.n	80039b2 <HAL_I2C_Init+0xaa>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039a6:	d004      	beq.n	80039b2 <HAL_I2C_Init+0xaa>
 80039a8:	f240 11c3 	movw	r1, #451	; 0x1c3
 80039ac:	487e      	ldr	r0, [pc, #504]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 80039ae:	f7fd fbe6 	bl	800117e <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_I2C_Init+0xc4>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d004      	beq.n	80039cc <HAL_I2C_Init+0xc4>
 80039c2:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80039c6:	4878      	ldr	r0, [pc, #480]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 80039c8:	f7fd fbd9 	bl	800117e <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d004      	beq.n	80039e2 <HAL_I2C_Init+0xda>
 80039d8:	f240 11c5 	movw	r1, #453	; 0x1c5
 80039dc:	4872      	ldr	r0, [pc, #456]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 80039de:	f7fd fbce 	bl	800117e <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_I2C_Init+0xf4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	2b40      	cmp	r3, #64	; 0x40
 80039f0:	d004      	beq.n	80039fc <HAL_I2C_Init+0xf4>
 80039f2:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80039f6:	486c      	ldr	r0, [pc, #432]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 80039f8:	f7fd fbc1 	bl	800117e <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_I2C_Init+0x10e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	2b80      	cmp	r3, #128	; 0x80
 8003a0a:	d004      	beq.n	8003a16 <HAL_I2C_Init+0x10e>
 8003a0c:	f240 11c7 	movw	r1, #455	; 0x1c7
 8003a10:	4865      	ldr	r0, [pc, #404]	; (8003ba8 <HAL_I2C_Init+0x2a0>)
 8003a12:	f7fd fbb4 	bl	800117e <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fc fe7c 	bl	8000728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a68:	f001 fc1c 	bl	80052a4 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	4a4f      	ldr	r2, [pc, #316]	; (8003bb0 <HAL_I2C_Init+0x2a8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d807      	bhi.n	8003a88 <HAL_I2C_Init+0x180>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4a4e      	ldr	r2, [pc, #312]	; (8003bb4 <HAL_I2C_Init+0x2ac>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf94      	ite	ls
 8003a80:	2301      	movls	r3, #1
 8003a82:	2300      	movhi	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	e006      	b.n	8003a96 <HAL_I2C_Init+0x18e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a4b      	ldr	r2, [pc, #300]	; (8003bb8 <HAL_I2C_Init+0x2b0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bf94      	ite	ls
 8003a90:	2301      	movls	r3, #1
 8003a92:	2300      	movhi	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e0fc      	b.n	8003c98 <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a46      	ldr	r2, [pc, #280]	; (8003bbc <HAL_I2C_Init+0x2b4>)
 8003aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa6:	0c9b      	lsrs	r3, r3, #18
 8003aa8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4a38      	ldr	r2, [pc, #224]	; (8003bb0 <HAL_I2C_Init+0x2a8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d802      	bhi.n	8003ad8 <HAL_I2C_Init+0x1d0>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	e009      	b.n	8003aec <HAL_I2C_Init+0x1e4>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ade:	fb02 f303 	mul.w	r3, r2, r3
 8003ae2:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_I2C_Init+0x2b8>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	099b      	lsrs	r3, r3, #6
 8003aea:	3301      	adds	r3, #1
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6812      	ldr	r2, [r2, #0]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003afe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	492a      	ldr	r1, [pc, #168]	; (8003bb0 <HAL_I2C_Init+0x2a8>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d819      	bhi.n	8003b40 <HAL_I2C_Init+0x238>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1e59      	subs	r1, r3, #1
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1a:	1c59      	adds	r1, r3, #1
 8003b1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b20:	400b      	ands	r3, r1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00a      	beq.n	8003b3c <HAL_I2C_Init+0x234>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e59      	subs	r1, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b34:	3301      	adds	r3, #1
 8003b36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3a:	e066      	b.n	8003c0a <HAL_I2C_Init+0x302>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	e064      	b.n	8003c0a <HAL_I2C_Init+0x302>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d111      	bne.n	8003b6c <HAL_I2C_Init+0x264>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	440b      	add	r3, r1
 8003b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	bf0c      	ite	eq
 8003b64:	2301      	moveq	r3, #1
 8003b66:	2300      	movne	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e012      	b.n	8003b92 <HAL_I2C_Init+0x28a>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	440b      	add	r3, r1
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_I2C_Init+0x2bc>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e037      	b.n	8003c0a <HAL_I2C_Init+0x302>
 8003b9a:	bf00      	nop
 8003b9c:	40005400 	.word	0x40005400
 8003ba0:	40005800 	.word	0x40005800
 8003ba4:	40005c00 	.word	0x40005c00
 8003ba8:	08009160 	.word	0x08009160
 8003bac:	00061a80 	.word	0x00061a80
 8003bb0:	000186a0 	.word	0x000186a0
 8003bb4:	001e847f 	.word	0x001e847f
 8003bb8:	003d08ff 	.word	0x003d08ff
 8003bbc:	431bde83 	.word	0x431bde83
 8003bc0:	10624dd3 	.word	0x10624dd3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10e      	bne.n	8003bea <HAL_I2C_Init+0x2e2>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	440b      	add	r3, r1
 8003bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bde:	3301      	adds	r3, #1
 8003be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003be8:	e00f      	b.n	8003c0a <HAL_I2C_Init+0x302>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1e58      	subs	r0, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	0099      	lsls	r1, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c00:	3301      	adds	r3, #1
 8003c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	6809      	ldr	r1, [r1, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69da      	ldr	r2, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c38:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6911      	ldr	r1, [r2, #16]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68d2      	ldr	r2, [r2, #12]
 8003c44:	4311      	orrs	r1, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6812      	ldr	r2, [r2, #0]
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1e7      	b.n	8004082 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a9b      	ldr	r2, [pc, #620]	; (8003f24 <HAL_I2S_Init+0x284>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_I2S_Init+0x4e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a99      	ldr	r2, [pc, #612]	; (8003f28 <HAL_I2S_Init+0x288>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_I2S_Init+0x4e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a98      	ldr	r2, [pc, #608]	; (8003f2c <HAL_I2S_Init+0x28c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_I2S_Init+0x4e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a96      	ldr	r2, [pc, #600]	; (8003f30 <HAL_I2S_Init+0x290>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_I2S_Init+0x4e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a95      	ldr	r2, [pc, #596]	; (8003f34 <HAL_I2S_Init+0x294>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_I2S_Init+0x4e>
 8003ce4:	f240 111b 	movw	r1, #283	; 0x11b
 8003ce8:	4893      	ldr	r0, [pc, #588]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003cea:	f7fd fa48 	bl	800117e <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d013      	beq.n	8003d1e <HAL_I2S_Init+0x7e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cfe:	d00e      	beq.n	8003d1e <HAL_I2S_Init+0x7e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d08:	d009      	beq.n	8003d1e <HAL_I2S_Init+0x7e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d004      	beq.n	8003d1e <HAL_I2S_Init+0x7e>
 8003d14:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003d18:	4887      	ldr	r0, [pc, #540]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003d1a:	f7fd fa30 	bl	800117e <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d014      	beq.n	8003d50 <HAL_I2S_Init+0xb0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d010      	beq.n	8003d50 <HAL_I2S_Init+0xb0>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d00c      	beq.n	8003d50 <HAL_I2S_Init+0xb0>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d008      	beq.n	8003d50 <HAL_I2S_Init+0xb0>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2bb0      	cmp	r3, #176	; 0xb0
 8003d44:	d004      	beq.n	8003d50 <HAL_I2S_Init+0xb0>
 8003d46:	f240 111d 	movw	r1, #285	; 0x11d
 8003d4a:	487b      	ldr	r0, [pc, #492]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003d4c:	f7fd fa17 	bl	800117e <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d010      	beq.n	8003d7a <HAL_I2S_Init+0xda>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d00c      	beq.n	8003d7a <HAL_I2S_Init+0xda>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d008      	beq.n	8003d7a <HAL_I2S_Init+0xda>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	2b05      	cmp	r3, #5
 8003d6e:	d004      	beq.n	8003d7a <HAL_I2S_Init+0xda>
 8003d70:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003d74:	4870      	ldr	r0, [pc, #448]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003d76:	f7fd fa02 	bl	800117e <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d82:	d008      	beq.n	8003d96 <HAL_I2S_Init+0xf6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_I2S_Init+0xf6>
 8003d8c:	f240 111f 	movw	r1, #287	; 0x11f
 8003d90:	4869      	ldr	r0, [pc, #420]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003d92:	f7fd f9f4 	bl	800117e <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003d9e:	d304      	bcc.n	8003daa <HAL_I2S_Init+0x10a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	4a65      	ldr	r2, [pc, #404]	; (8003f3c <HAL_I2S_Init+0x29c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d908      	bls.n	8003dbc <HAL_I2S_Init+0x11c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d004      	beq.n	8003dbc <HAL_I2S_Init+0x11c>
 8003db2:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003db6:	4860      	ldr	r0, [pc, #384]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003db8:	f7fd f9e1 	bl	800117e <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_I2S_Init+0x136>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d004      	beq.n	8003dd6 <HAL_I2S_Init+0x136>
 8003dcc:	f240 1121 	movw	r1, #289	; 0x121
 8003dd0:	4859      	ldr	r0, [pc, #356]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003dd2:	f7fd f9d4 	bl	800117e <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d008      	beq.n	8003df0 <HAL_I2S_Init+0x150>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d004      	beq.n	8003df0 <HAL_I2S_Init+0x150>
 8003de6:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003dea:	4853      	ldr	r0, [pc, #332]	; (8003f38 <HAL_I2S_Init+0x298>)
 8003dec:	f7fd f9c7 	bl	800117e <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a4e      	ldr	r2, [pc, #312]	; (8003f40 <HAL_I2S_Init+0x2a0>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fc fd32 	bl	8000874 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	6812      	ldr	r2, [r2, #0]
 8003e22:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003e26:	f023 030f 	bic.w	r3, r3, #15
 8003e2a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2202      	movs	r2, #2
 8003e32:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d060      	beq.n	8003efe <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003e44:	2310      	movs	r3, #16
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e001      	b.n	8003e4e <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d802      	bhi.n	8003e5c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f001 fc49 	bl	80056f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e62:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6c:	d125      	bne.n	8003eba <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d010      	beq.n	8003e98 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e92:	3305      	adds	r3, #5
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	e01f      	b.n	8003ed8 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	3305      	adds	r3, #5
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e00e      	b.n	8003ed8 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	3305      	adds	r3, #5
 8003ed6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4a1a      	ldr	r2, [pc, #104]	; (8003f44 <HAL_I2S_Init+0x2a4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	e003      	b.n	8003f06 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003efe:	2302      	movs	r3, #2
 8003f00:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d902      	bls.n	8003f12 <HAL_I2S_Init+0x272>
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d91a      	bls.n	8003f48 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	f043 0210 	orr.w	r2, r3, #16
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0af      	b.n	8004082 <HAL_I2S_Init+0x3e2>
 8003f22:	bf00      	nop
 8003f24:	40013000 	.word	0x40013000
 8003f28:	40003800 	.word	0x40003800
 8003f2c:	40003c00 	.word	0x40003c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40015000 	.word	0x40015000
 8003f38:	08009198 	.word	0x08009198
 8003f3c:	0002ee00 	.word	0x0002ee00
 8003f40:	08004193 	.word	0x08004193
 8003f44:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69fa      	ldr	r2, [r7, #28]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f66:	f023 030f 	bic.w	r3, r3, #15
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6851      	ldr	r1, [r2, #4]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6892      	ldr	r2, [r2, #8]
 8003f72:	4311      	orrs	r1, r2
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	68d2      	ldr	r2, [r2, #12]
 8003f78:	4311      	orrs	r1, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6992      	ldr	r2, [r2, #24]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_I2S_Init+0x306>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d004      	beq.n	8003fa6 <HAL_I2S_Init+0x306>
 8003f9c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003fa0:	483a      	ldr	r0, [pc, #232]	; (800408c <HAL_I2S_Init+0x3ec>)
 8003fa2:	f7fd f8ec 	bl	800117e <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d161      	bne.n	8004072 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a37      	ldr	r2, [pc, #220]	; (8004090 <HAL_I2S_Init+0x3f0>)
 8003fb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a36      	ldr	r2, [pc, #216]	; (8004094 <HAL_I2S_Init+0x3f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2S_Init+0x322>
 8003fbe:	4b36      	ldr	r3, [pc, #216]	; (8004098 <HAL_I2S_Init+0x3f8>)
 8003fc0:	e001      	b.n	8003fc6 <HAL_I2S_Init+0x326>
 8003fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4931      	ldr	r1, [pc, #196]	; (8004094 <HAL_I2S_Init+0x3f4>)
 8003fce:	428a      	cmp	r2, r1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2S_Init+0x336>
 8003fd2:	4a31      	ldr	r2, [pc, #196]	; (8004098 <HAL_I2S_Init+0x3f8>)
 8003fd4:	e001      	b.n	8003fda <HAL_I2S_Init+0x33a>
 8003fd6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003fda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fde:	f023 030f 	bic.w	r3, r3, #15
 8003fe2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a2a      	ldr	r2, [pc, #168]	; (8004094 <HAL_I2S_Init+0x3f4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2S_Init+0x352>
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <HAL_I2S_Init+0x3f8>)
 8003ff0:	e001      	b.n	8003ff6 <HAL_I2S_Init+0x356>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a25      	ldr	r2, [pc, #148]	; (8004094 <HAL_I2S_Init+0x3f4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <HAL_I2S_Init+0x368>
 8004004:	4b24      	ldr	r3, [pc, #144]	; (8004098 <HAL_I2S_Init+0x3f8>)
 8004006:	e001      	b.n	800400c <HAL_I2S_Init+0x36c>
 8004008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004018:	d003      	beq.n	8004022 <HAL_I2S_Init+0x382>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d103      	bne.n	800402a <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	e001      	b.n	800402e <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004038:	4313      	orrs	r3, r2
 800403a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004042:	4313      	orrs	r3, r2
 8004044:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800404c:	4313      	orrs	r3, r2
 800404e:	b29a      	uxth	r2, r3
 8004050:	897b      	ldrh	r3, [r7, #10]
 8004052:	4313      	orrs	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800405a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <HAL_I2S_Init+0x3f4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d101      	bne.n	800406a <HAL_I2S_Init+0x3ca>
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <HAL_I2S_Init+0x3f8>)
 8004068:	e001      	b.n	800406e <HAL_I2S_Init+0x3ce>
 800406a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406e:	897a      	ldrh	r2, [r7, #10]
 8004070:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	08009198 	.word	0x08009198
 8004090:	080042a9 	.word	0x080042a9
 8004094:	40003800 	.word	0x40003800
 8004098:	40003400 	.word	0x40003400

0800409c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10e      	bne.n	800412c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800411c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ffb8 	bl	800409c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	b292      	uxth	r2, r2
 8004148:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	1c9a      	adds	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10e      	bne.n	800418a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800417a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff93 	bl	80040b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d13a      	bne.n	8004224 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d109      	bne.n	80041cc <I2S_IRQHandler+0x3a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d102      	bne.n	80041cc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7ff ffb4 	bl	8004134 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d126      	bne.n	8004224 <I2S_IRQHandler+0x92>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d11f      	bne.n	8004224 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80041f4:	2300      	movs	r3, #0
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff ff50 	bl	80040c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b03      	cmp	r3, #3
 800422e:	d136      	bne.n	800429e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d109      	bne.n	800424e <I2S_IRQHandler+0xbc>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b80      	cmp	r3, #128	; 0x80
 8004246:	d102      	bne.n	800424e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff45 	bl	80040d8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b08      	cmp	r3, #8
 8004256:	d122      	bne.n	800429e <I2S_IRQHandler+0x10c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d11b      	bne.n	800429e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004274:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	f043 0204 	orr.w	r2, r3, #4
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff13 	bl	80040c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4aa2      	ldr	r2, [pc, #648]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d101      	bne.n	80042c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80042c2:	4ba2      	ldr	r3, [pc, #648]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042c4:	e001      	b.n	80042ca <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80042c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a9b      	ldr	r2, [pc, #620]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80042e0:	4b9a      	ldr	r3, [pc, #616]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80042e2:	e001      	b.n	80042e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80042e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f4:	d004      	beq.n	8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f040 8099 	bne.w	8004432 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d107      	bne.n	800431a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f925 	bl	8004564 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d107      	bne.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f9c8 	bl	80046c4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d13a      	bne.n	80043b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0320 	and.w	r3, r3, #32
 8004344:	2b00      	cmp	r3, #0
 8004346:	d035      	beq.n	80043b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a7e      	ldr	r2, [pc, #504]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d101      	bne.n	8004356 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004352:	4b7e      	ldr	r3, [pc, #504]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004354:	e001      	b.n	800435a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4979      	ldr	r1, [pc, #484]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004362:	428b      	cmp	r3, r1
 8004364:	d101      	bne.n	800436a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004366:	4b79      	ldr	r3, [pc, #484]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004368:	e001      	b.n	800436e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800436a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800436e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004372:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004382:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004384:	2300      	movs	r3, #0
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fe88 	bl	80040c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	f040 80be 	bne.w	800453c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 80b8 	beq.w	800453c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043da:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a59      	ldr	r2, [pc, #356]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d101      	bne.n	80043ea <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80043e6:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043e8:	e001      	b.n	80043ee <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80043ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4954      	ldr	r1, [pc, #336]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80043f6:	428b      	cmp	r3, r1
 80043f8:	d101      	bne.n	80043fe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80043fa:	4b54      	ldr	r3, [pc, #336]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80043fc:	e001      	b.n	8004402 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80043fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004402:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004406:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004408:	2300      	movs	r3, #0
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fe4a 	bl	80040c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004430:	e084      	b.n	800453c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d107      	bne.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f8be 	bl	80045c8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b01      	cmp	r3, #1
 8004454:	d107      	bne.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f8fd 	bl	8004660 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d12f      	bne.n	80044d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d02a      	beq.n	80044d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004488:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2e      	ldr	r2, [pc, #184]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d101      	bne.n	8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004496:	e001      	b.n	800449c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4929      	ldr	r1, [pc, #164]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044a4:	428b      	cmp	r3, r1
 80044a6:	d101      	bne.n	80044ac <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80044a8:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044aa:	e001      	b.n	80044b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80044ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044b4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f043 0202 	orr.w	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fdfa 	bl	80040c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d131      	bne.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02c      	beq.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a17      	ldr	r2, [pc, #92]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80044ee:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80044f0:	e001      	b.n	80044f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80044f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4912      	ldr	r1, [pc, #72]	; (8004548 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80044fe:	428b      	cmp	r3, r1
 8004500:	d101      	bne.n	8004506 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004504:	e001      	b.n	800450a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004506:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800450a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800450e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800451e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff fdc5 	bl	80040c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800453a:	e000      	b.n	800453e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800453c:	bf00      	nop
}
 800453e:	bf00      	nop
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40003800 	.word	0x40003800
 800454c:	40003400 	.word	0x40003400

08004550 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c99      	adds	r1, r3, #2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6251      	str	r1, [r2, #36]	; 0x24
 8004576:	881a      	ldrh	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d113      	bne.n	80045be <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7ff ffc9 	bl	8004550 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045be:	bf00      	nop
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
	...

080045c8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c99      	adds	r1, r3, #2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6251      	str	r1, [r2, #36]	; 0x24
 80045da:	8819      	ldrh	r1, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <I2SEx_TxISR_I2SExt+0x90>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d101      	bne.n	80045ea <I2SEx_TxISR_I2SExt+0x22>
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <I2SEx_TxISR_I2SExt+0x94>)
 80045e8:	e001      	b.n	80045ee <I2SEx_TxISR_I2SExt+0x26>
 80045ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045ee:	460a      	mov	r2, r1
 80045f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d121      	bne.n	800464e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a12      	ldr	r2, [pc, #72]	; (8004658 <I2SEx_TxISR_I2SExt+0x90>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d101      	bne.n	8004618 <I2SEx_TxISR_I2SExt+0x50>
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <I2SEx_TxISR_I2SExt+0x94>)
 8004616:	e001      	b.n	800461c <I2SEx_TxISR_I2SExt+0x54>
 8004618:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	490d      	ldr	r1, [pc, #52]	; (8004658 <I2SEx_TxISR_I2SExt+0x90>)
 8004624:	428b      	cmp	r3, r1
 8004626:	d101      	bne.n	800462c <I2SEx_TxISR_I2SExt+0x64>
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <I2SEx_TxISR_I2SExt+0x94>)
 800462a:	e001      	b.n	8004630 <I2SEx_TxISR_I2SExt+0x68>
 800462c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004630:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004634:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d106      	bne.n	800464e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff81 	bl	8004550 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40003800 	.word	0x40003800
 800465c:	40003400 	.word	0x40003400

08004660 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68d8      	ldr	r0, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004672:	1c99      	adds	r1, r3, #2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004678:	b282      	uxth	r2, r0
 800467a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d113      	bne.n	80046bc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046a2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ff4a 	bl	8004550 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046bc:	bf00      	nop
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a20      	ldr	r2, [pc, #128]	; (8004754 <I2SEx_RxISR_I2SExt+0x90>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <I2SEx_RxISR_I2SExt+0x16>
 80046d6:	4b20      	ldr	r3, [pc, #128]	; (8004758 <I2SEx_RxISR_I2SExt+0x94>)
 80046d8:	e001      	b.n	80046de <I2SEx_RxISR_I2SExt+0x1a>
 80046da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046de:	68d8      	ldr	r0, [r3, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	1c99      	adds	r1, r3, #2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046ea:	b282      	uxth	r2, r0
 80046ec:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004700:	b29b      	uxth	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d121      	bne.n	800474a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a12      	ldr	r2, [pc, #72]	; (8004754 <I2SEx_RxISR_I2SExt+0x90>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <I2SEx_RxISR_I2SExt+0x50>
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <I2SEx_RxISR_I2SExt+0x94>)
 8004712:	e001      	b.n	8004718 <I2SEx_RxISR_I2SExt+0x54>
 8004714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	490d      	ldr	r1, [pc, #52]	; (8004754 <I2SEx_RxISR_I2SExt+0x90>)
 8004720:	428b      	cmp	r3, r1
 8004722:	d101      	bne.n	8004728 <I2SEx_RxISR_I2SExt+0x64>
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <I2SEx_RxISR_I2SExt+0x94>)
 8004726:	e001      	b.n	800472c <I2SEx_RxISR_I2SExt+0x68>
 8004728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800472c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004730:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff03 	bl	8004550 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40003800 	.word	0x40003800
 8004758:	40003400 	.word	0x40003400

0800475c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e316      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b0f      	cmp	r3, #15
 8004774:	d903      	bls.n	800477e <HAL_RCC_OscConfig+0x22>
 8004776:	21e8      	movs	r1, #232	; 0xe8
 8004778:	48a3      	ldr	r0, [pc, #652]	; (8004a08 <HAL_RCC_OscConfig+0x2ac>)
 800477a:	f7fc fd00 	bl	800117e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	f000 8088 	beq.w	800489c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00d      	beq.n	80047b0 <HAL_RCC_OscConfig+0x54>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800479c:	d008      	beq.n	80047b0 <HAL_RCC_OscConfig+0x54>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a6:	d003      	beq.n	80047b0 <HAL_RCC_OscConfig+0x54>
 80047a8:	21ed      	movs	r1, #237	; 0xed
 80047aa:	4897      	ldr	r0, [pc, #604]	; (8004a08 <HAL_RCC_OscConfig+0x2ac>)
 80047ac:	f7fc fce7 	bl	800117e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047b0:	4b96      	ldr	r3, [pc, #600]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d00c      	beq.n	80047d6 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047bc:	4b93      	ldr	r3, [pc, #588]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d112      	bne.n	80047ee <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c8:	4b90      	ldr	r3, [pc, #576]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d4:	d10b      	bne.n	80047ee <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d6:	4b8d      	ldr	r3, [pc, #564]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d05b      	beq.n	800489a <HAL_RCC_OscConfig+0x13e>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d157      	bne.n	800489a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e2d6      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f6:	d106      	bne.n	8004806 <HAL_RCC_OscConfig+0xaa>
 80047f8:	4b84      	ldr	r3, [pc, #528]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a83      	ldr	r2, [pc, #524]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80047fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e01d      	b.n	8004842 <HAL_RCC_OscConfig+0xe6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480e:	d10c      	bne.n	800482a <HAL_RCC_OscConfig+0xce>
 8004810:	4b7e      	ldr	r3, [pc, #504]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a7d      	ldr	r2, [pc, #500]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800481a:	6013      	str	r3, [r2, #0]
 800481c:	4b7b      	ldr	r3, [pc, #492]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a7a      	ldr	r2, [pc, #488]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004826:	6013      	str	r3, [r2, #0]
 8004828:	e00b      	b.n	8004842 <HAL_RCC_OscConfig+0xe6>
 800482a:	4b78      	ldr	r3, [pc, #480]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a77      	ldr	r2, [pc, #476]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	4b75      	ldr	r3, [pc, #468]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a74      	ldr	r2, [pc, #464]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 800483c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d013      	beq.n	8004872 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fc fe55 	bl	80014f8 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004852:	f7fc fe51 	bl	80014f8 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b64      	cmp	r3, #100	; 0x64
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e29b      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004864:	4b69      	ldr	r3, [pc, #420]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0xf6>
 8004870:	e014      	b.n	800489c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fc fe41 	bl	80014f8 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800487a:	f7fc fe3d 	bl	80014f8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e287      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488c:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <HAL_RCC_OscConfig+0x11e>
 8004898:	e000      	b.n	800489c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d079      	beq.n	800499c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <HAL_RCC_OscConfig+0x166>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d004      	beq.n	80048c2 <HAL_RCC_OscConfig+0x166>
 80048b8:	f240 111f 	movw	r1, #287	; 0x11f
 80048bc:	4852      	ldr	r0, [pc, #328]	; (8004a08 <HAL_RCC_OscConfig+0x2ac>)
 80048be:	f7fc fc5e 	bl	800117e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b1f      	cmp	r3, #31
 80048c8:	d904      	bls.n	80048d4 <HAL_RCC_OscConfig+0x178>
 80048ca:	f44f 7190 	mov.w	r1, #288	; 0x120
 80048ce:	484e      	ldr	r0, [pc, #312]	; (8004a08 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	f7fc fc55 	bl	800117e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048d4:	4b4d      	ldr	r3, [pc, #308]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e0:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d11c      	bne.n	8004926 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ec:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f8:	4b44      	ldr	r3, [pc, #272]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_OscConfig+0x1b4>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d001      	beq.n	8004910 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e245      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004910:	4b3e      	ldr	r3, [pc, #248]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	493b      	ldr	r1, [pc, #236]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004924:	e03a      	b.n	800499c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d020      	beq.n	8004970 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800492e:	4b38      	ldr	r3, [pc, #224]	; (8004a10 <HAL_RCC_OscConfig+0x2b4>)
 8004930:	2201      	movs	r2, #1
 8004932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fc fde0 	bl	80014f8 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800493c:	f7fc fddc 	bl	80014f8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e226      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494e:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495a:	4b2c      	ldr	r3, [pc, #176]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4928      	ldr	r1, [pc, #160]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 800496a:	4313      	orrs	r3, r2
 800496c:	600b      	str	r3, [r1, #0]
 800496e:	e015      	b.n	800499c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_RCC_OscConfig+0x2b4>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fc fdbf 	bl	80014f8 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497e:	f7fc fdbb 	bl	80014f8 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e205      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004990:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1f0      	bne.n	800497e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d046      	beq.n	8004a36 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_RCC_OscConfig+0x266>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d004      	beq.n	80049c2 <HAL_RCC_OscConfig+0x266>
 80049b8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80049bc:	4812      	ldr	r0, [pc, #72]	; (8004a08 <HAL_RCC_OscConfig+0x2ac>)
 80049be:	f7fc fbde 	bl	800117e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d016      	beq.n	80049f8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_OscConfig+0x2b8>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fc fd92 	bl	80014f8 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fc fd8e 	bl	80014f8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1d8      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ea:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <HAL_RCC_OscConfig+0x2b0>)
 80049ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x27c>
 80049f6:	e01e      	b.n	8004a36 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x2b8>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fc fd7b 	bl	80014f8 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a04:	e011      	b.n	8004a2a <HAL_RCC_OscConfig+0x2ce>
 8004a06:	bf00      	nop
 8004a08:	080091d0 	.word	0x080091d0
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	42470000 	.word	0x42470000
 8004a14:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a18:	f7fc fd6e 	bl	80014f8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e1b8      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a2a:	4b97      	ldr	r3, [pc, #604]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 80a8 	beq.w	8004b94 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a44:	2300      	movs	r3, #0
 8004a46:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x30e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d008      	beq.n	8004a6a <HAL_RCC_OscConfig+0x30e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCC_OscConfig+0x30e>
 8004a60:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004a64:	4889      	ldr	r0, [pc, #548]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004a66:	f7fc fb8a 	bl	800117e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6a:	4b87      	ldr	r3, [pc, #540]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	4b83      	ldr	r3, [pc, #524]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a82      	ldr	r2, [pc, #520]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b80      	ldr	r3, [pc, #512]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a92:	2301      	movs	r3, #1
 8004a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a96:	4b7e      	ldr	r3, [pc, #504]	; (8004c90 <HAL_RCC_OscConfig+0x534>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d118      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa2:	4b7b      	ldr	r3, [pc, #492]	; (8004c90 <HAL_RCC_OscConfig+0x534>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a7a      	ldr	r2, [pc, #488]	; (8004c90 <HAL_RCC_OscConfig+0x534>)
 8004aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aae:	f7fc fd23 	bl	80014f8 <HAL_GetTick>
 8004ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab6:	f7fc fd1f 	bl	80014f8 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e169      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac8:	4b71      	ldr	r3, [pc, #452]	; (8004c90 <HAL_RCC_OscConfig+0x534>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0f0      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d106      	bne.n	8004aea <HAL_RCC_OscConfig+0x38e>
 8004adc:	4b6a      	ldr	r3, [pc, #424]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a69      	ldr	r2, [pc, #420]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae8:	e01c      	b.n	8004b24 <HAL_RCC_OscConfig+0x3c8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b05      	cmp	r3, #5
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x3b0>
 8004af2:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af6:	4a64      	ldr	r2, [pc, #400]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	6713      	str	r3, [r2, #112]	; 0x70
 8004afe:	4b62      	ldr	r3, [pc, #392]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a61      	ldr	r2, [pc, #388]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b04:	f043 0301 	orr.w	r3, r3, #1
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0x3c8>
 8004b0c:	4b5e      	ldr	r3, [pc, #376]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a5d      	ldr	r2, [pc, #372]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
 8004b18:	4b5b      	ldr	r3, [pc, #364]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a5a      	ldr	r2, [pc, #360]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b1e:	f023 0304 	bic.w	r3, r3, #4
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d015      	beq.n	8004b58 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fc fce4 	bl	80014f8 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b34:	f7fc fce0 	bl	80014f8 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e128      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0ee      	beq.n	8004b34 <HAL_RCC_OscConfig+0x3d8>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b58:	f7fc fcce 	bl	80014f8 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5e:	e00a      	b.n	8004b76 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b60:	f7fc fcca 	bl	80014f8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e112      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b76:	4b44      	ldr	r3, [pc, #272]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1ee      	bne.n	8004b60 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d105      	bne.n	8004b94 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4b3f      	ldr	r3, [pc, #252]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00c      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x45a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x45a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d004      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x45a>
 8004bac:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004bb0:	4836      	ldr	r0, [pc, #216]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004bb2:	f7fc fae4 	bl	800117e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80ed 	beq.w	8004d9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bc0:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <HAL_RCC_OscConfig+0x52c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 030c 	and.w	r3, r3, #12
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	f000 80ae 	beq.w	8004d2a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	f040 8092 	bne.w	8004cfc <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x498>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d004      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x498>
 8004bea:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004bee:	4827      	ldr	r0, [pc, #156]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004bf0:	f7fc fac5 	bl	800117e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	2b3f      	cmp	r3, #63	; 0x3f
 8004bfa:	d904      	bls.n	8004c06 <HAL_RCC_OscConfig+0x4aa>
 8004bfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c00:	4822      	ldr	r0, [pc, #136]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004c02:	f7fc fabc 	bl	800117e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b31      	cmp	r3, #49	; 0x31
 8004c0c:	d904      	bls.n	8004c18 <HAL_RCC_OscConfig+0x4bc>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004c16:	d904      	bls.n	8004c22 <HAL_RCC_OscConfig+0x4c6>
 8004c18:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004c1c:	481b      	ldr	r0, [pc, #108]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004c1e:	f7fc faae 	bl	800117e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d010      	beq.n	8004c4c <HAL_RCC_OscConfig+0x4f0>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d00c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x4f0>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	2b06      	cmp	r3, #6
 8004c38:	d008      	beq.n	8004c4c <HAL_RCC_OscConfig+0x4f0>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d004      	beq.n	8004c4c <HAL_RCC_OscConfig+0x4f0>
 8004c42:	f240 11db 	movw	r1, #475	; 0x1db
 8004c46:	4811      	ldr	r0, [pc, #68]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004c48:	f7fc fa99 	bl	800117e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d903      	bls.n	8004c5c <HAL_RCC_OscConfig+0x500>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c58:	2b0f      	cmp	r3, #15
 8004c5a:	d904      	bls.n	8004c66 <HAL_RCC_OscConfig+0x50a>
 8004c5c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004c60:	480a      	ldr	r0, [pc, #40]	; (8004c8c <HAL_RCC_OscConfig+0x530>)
 8004c62:	f7fc fa8c 	bl	800117e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x538>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6c:	f7fc fc44 	bl	80014f8 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c72:	e011      	b.n	8004c98 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c74:	f7fc fc40 	bl	80014f8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d90a      	bls.n	8004c98 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e08a      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	080091d0 	.word	0x080091d0
 8004c90:	40007000 	.word	0x40007000
 8004c94:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c98:	4b42      	ldr	r3, [pc, #264]	; (8004da4 <HAL_RCC_OscConfig+0x648>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e7      	bne.n	8004c74 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	019b      	lsls	r3, r3, #6
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	4936      	ldr	r1, [pc, #216]	; (8004da4 <HAL_RCC_OscConfig+0x648>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <HAL_RCC_OscConfig+0x64c>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fc fc10 	bl	80014f8 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fc fc0c 	bl	80014f8 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e056      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b2d      	ldr	r3, [pc, #180]	; (8004da4 <HAL_RCC_OscConfig+0x648>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x580>
 8004cfa:	e04e      	b.n	8004d9a <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfc:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCC_OscConfig+0x64c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fc fbf9 	bl	80014f8 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fc fbf5 	bl	80014f8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e03f      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <HAL_RCC_OscConfig+0x648>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x5ae>
 8004d28:	e037      	b.n	8004d9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e032      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCC_OscConfig+0x648>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d028      	beq.n	8004d96 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d11a      	bne.n	8004d96 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d66:	4013      	ands	r3, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d111      	bne.n	8004d96 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d107      	bne.n	8004d96 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d001      	beq.n	8004d9a <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40023800 	.word	0x40023800
 8004da8:	42470060 	.word	0x42470060

08004dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e174      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x24>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b0f      	cmp	r3, #15
 8004dce:	d904      	bls.n	8004dda <HAL_RCC_ClockConfig+0x2e>
 8004dd0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8004dd4:	487b      	ldr	r0, [pc, #492]	; (8004fc4 <HAL_RCC_ClockConfig+0x218>)
 8004dd6:	f7fc f9d2 	bl	800117e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d019      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d016      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d013      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d010      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d00d      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b05      	cmp	r3, #5
 8004dfc:	d00a      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	d007      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b07      	cmp	r3, #7
 8004e08:	d004      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x68>
 8004e0a:	f240 215d 	movw	r1, #605	; 0x25d
 8004e0e:	486d      	ldr	r0, [pc, #436]	; (8004fc4 <HAL_RCC_ClockConfig+0x218>)
 8004e10:	f7fc f9b5 	bl	800117e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b6c      	ldr	r3, [pc, #432]	; (8004fc8 <HAL_RCC_ClockConfig+0x21c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d90c      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b69      	ldr	r3, [pc, #420]	; (8004fc8 <HAL_RCC_ClockConfig+0x21c>)
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e2a:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <HAL_RCC_ClockConfig+0x21c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e136      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d049      	beq.n	8004edc <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e54:	4b5d      	ldr	r3, [pc, #372]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004e5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e6c:	4b57      	ldr	r3, [pc, #348]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4a56      	ldr	r2, [pc, #344]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004e72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d024      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d020      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	2b90      	cmp	r3, #144	; 0x90
 8004e8e:	d01c      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2ba0      	cmp	r3, #160	; 0xa0
 8004e96:	d018      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	2bb0      	cmp	r3, #176	; 0xb0
 8004e9e:	d014      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8004ea6:	d010      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2bd0      	cmp	r3, #208	; 0xd0
 8004eae:	d00c      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	2be0      	cmp	r3, #224	; 0xe0
 8004eb6:	d008      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2bf0      	cmp	r3, #240	; 0xf0
 8004ebe:	d004      	beq.n	8004eca <HAL_RCC_ClockConfig+0x11e>
 8004ec0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8004ec4:	483f      	ldr	r0, [pc, #252]	; (8004fc4 <HAL_RCC_ClockConfig+0x218>)
 8004ec6:	f7fc f95a 	bl	800117e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eca:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	493d      	ldr	r1, [pc, #244]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d059      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d010      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x166>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d00c      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x166>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d008      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x166>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d004      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x166>
 8004f08:	f240 2187 	movw	r1, #647	; 0x287
 8004f0c:	482d      	ldr	r0, [pc, #180]	; (8004fc4 <HAL_RCC_ClockConfig+0x218>)
 8004f0e:	f7fc f936 	bl	800117e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d107      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b2c      	ldr	r3, [pc, #176]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d119      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0bf      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d003      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3a:	4b24      	ldr	r3, [pc, #144]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e0af      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4a:	4b20      	ldr	r3, [pc, #128]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e0a7      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5a:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f023 0203 	bic.w	r2, r3, #3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4919      	ldr	r1, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f6c:	f7fc fac4 	bl	80014f8 <HAL_GetTick>
 8004f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	e00a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f74:	f7fc fac0 	bl	80014f8 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e08f      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8a:	4b10      	ldr	r3, [pc, #64]	; (8004fcc <HAL_RCC_ClockConfig+0x220>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 020c 	and.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d1eb      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <HAL_RCC_ClockConfig+0x21c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d212      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_RCC_ClockConfig+0x21c>)
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_ClockConfig+0x21c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d007      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e072      	b.n	80050aa <HAL_RCC_ClockConfig+0x2fe>
 8004fc4:	080091d0 	.word	0x080091d0
 8004fc8:	40023c00 	.word	0x40023c00
 8004fcc:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d025      	beq.n	8005028 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <HAL_RCC_ClockConfig+0x26a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d013      	beq.n	8005016 <HAL_RCC_ClockConfig+0x26a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004ff6:	d00e      	beq.n	8005016 <HAL_RCC_ClockConfig+0x26a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005000:	d009      	beq.n	8005016 <HAL_RCC_ClockConfig+0x26a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800500a:	d004      	beq.n	8005016 <HAL_RCC_ClockConfig+0x26a>
 800500c:	f240 21c5 	movw	r1, #709	; 0x2c5
 8005010:	4828      	ldr	r0, [pc, #160]	; (80050b4 <HAL_RCC_ClockConfig+0x308>)
 8005012:	f7fc f8b4 	bl	800117e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005016:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <HAL_RCC_ClockConfig+0x30c>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4925      	ldr	r1, [pc, #148]	; (80050b8 <HAL_RCC_ClockConfig+0x30c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d026      	beq.n	8005082 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d018      	beq.n	800506e <HAL_RCC_ClockConfig+0x2c2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d013      	beq.n	800506e <HAL_RCC_ClockConfig+0x2c2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800504e:	d00e      	beq.n	800506e <HAL_RCC_ClockConfig+0x2c2>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005058:	d009      	beq.n	800506e <HAL_RCC_ClockConfig+0x2c2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005062:	d004      	beq.n	800506e <HAL_RCC_ClockConfig+0x2c2>
 8005064:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005068:	4812      	ldr	r0, [pc, #72]	; (80050b4 <HAL_RCC_ClockConfig+0x308>)
 800506a:	f7fc f888 	bl	800117e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCC_ClockConfig+0x30c>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490e      	ldr	r1, [pc, #56]	; (80050b8 <HAL_RCC_ClockConfig+0x30c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005082:	f000 f821 	bl	80050c8 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_ClockConfig+0x30c>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490a      	ldr	r1, [pc, #40]	; (80050bc <HAL_RCC_ClockConfig+0x310>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <HAL_RCC_ClockConfig+0x314>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x318>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc f9e4 	bl	8001470 <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	080091d0 	.word	0x080091d0
 80050b8:	40023800 	.word	0x40023800
 80050bc:	08009280 	.word	0x08009280
 80050c0:	20000000 	.word	0x20000000
 80050c4:	20000004 	.word	0x20000004

080050c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	2300      	movs	r3, #0
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	2300      	movs	r3, #0
 80050da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e0:	4b67      	ldr	r3, [pc, #412]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f003 030c 	and.w	r3, r3, #12
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d00d      	beq.n	8005108 <HAL_RCC_GetSysClockFreq+0x40>
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	f200 80bd 	bhi.w	800526c <HAL_RCC_GetSysClockFreq+0x1a4>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0x34>
 80050f6:	2b04      	cmp	r3, #4
 80050f8:	d003      	beq.n	8005102 <HAL_RCC_GetSysClockFreq+0x3a>
 80050fa:	e0b7      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050fc:	4b61      	ldr	r3, [pc, #388]	; (8005284 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050fe:	60bb      	str	r3, [r7, #8]
       break;
 8005100:	e0b7      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005102:	4b61      	ldr	r3, [pc, #388]	; (8005288 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005104:	60bb      	str	r3, [r7, #8]
      break;
 8005106:	e0b4      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005108:	4b5d      	ldr	r3, [pc, #372]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005110:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005112:	4b5b      	ldr	r3, [pc, #364]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d04d      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511e:	4b58      	ldr	r3, [pc, #352]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	461a      	mov	r2, r3
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	ea02 0800 	and.w	r8, r2, r0
 8005136:	ea03 0901 	and.w	r9, r3, r1
 800513a:	4640      	mov	r0, r8
 800513c:	4649      	mov	r1, r9
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	014b      	lsls	r3, r1, #5
 8005148:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800514c:	0142      	lsls	r2, r0, #5
 800514e:	4610      	mov	r0, r2
 8005150:	4619      	mov	r1, r3
 8005152:	ebb0 0008 	subs.w	r0, r0, r8
 8005156:	eb61 0109 	sbc.w	r1, r1, r9
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	018b      	lsls	r3, r1, #6
 8005164:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005168:	0182      	lsls	r2, r0, #6
 800516a:	1a12      	subs	r2, r2, r0
 800516c:	eb63 0301 	sbc.w	r3, r3, r1
 8005170:	f04f 0000 	mov.w	r0, #0
 8005174:	f04f 0100 	mov.w	r1, #0
 8005178:	00d9      	lsls	r1, r3, #3
 800517a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800517e:	00d0      	lsls	r0, r2, #3
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	eb12 0208 	adds.w	r2, r2, r8
 8005188:	eb43 0309 	adc.w	r3, r3, r9
 800518c:	f04f 0000 	mov.w	r0, #0
 8005190:	f04f 0100 	mov.w	r1, #0
 8005194:	0259      	lsls	r1, r3, #9
 8005196:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800519a:	0250      	lsls	r0, r2, #9
 800519c:	4602      	mov	r2, r0
 800519e:	460b      	mov	r3, r1
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	f7fb f814 	bl	80001d8 <__aeabi_uldivmod>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4613      	mov	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	e04a      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ba:	4b31      	ldr	r3, [pc, #196]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	461a      	mov	r2, r3
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	ea02 0400 	and.w	r4, r2, r0
 80051d2:	ea03 0501 	and.w	r5, r3, r1
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	014b      	lsls	r3, r1, #5
 80051e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051e8:	0142      	lsls	r2, r0, #5
 80051ea:	4610      	mov	r0, r2
 80051ec:	4619      	mov	r1, r3
 80051ee:	1b00      	subs	r0, r0, r4
 80051f0:	eb61 0105 	sbc.w	r1, r1, r5
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	018b      	lsls	r3, r1, #6
 80051fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005202:	0182      	lsls	r2, r0, #6
 8005204:	1a12      	subs	r2, r2, r0
 8005206:	eb63 0301 	sbc.w	r3, r3, r1
 800520a:	f04f 0000 	mov.w	r0, #0
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	00d9      	lsls	r1, r3, #3
 8005214:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005218:	00d0      	lsls	r0, r2, #3
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	1912      	adds	r2, r2, r4
 8005220:	eb45 0303 	adc.w	r3, r5, r3
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f04f 0100 	mov.w	r1, #0
 800522c:	0299      	lsls	r1, r3, #10
 800522e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005232:	0290      	lsls	r0, r2, #10
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4610      	mov	r0, r2
 800523a:	4619      	mov	r1, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	461a      	mov	r2, r3
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	f7fa ffc8 	bl	80001d8 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4613      	mov	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	0c1b      	lsrs	r3, r3, #16
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	3301      	adds	r3, #1
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	60bb      	str	r3, [r7, #8]
      break;
 800526a:	e002      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800526e:	60bb      	str	r3, [r7, #8]
      break;
 8005270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005272:	68bb      	ldr	r3, [r7, #8]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800527e:	bf00      	nop
 8005280:	40023800 	.word	0x40023800
 8005284:	00f42400 	.word	0x00f42400
 8005288:	007a1200 	.word	0x007a1200

0800528c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005290:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005292:	681b      	ldr	r3, [r3, #0]
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000000 	.word	0x20000000

080052a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052a8:	f7ff fff0 	bl	800528c <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	0a9b      	lsrs	r3, r3, #10
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40023800 	.word	0x40023800
 80052c8:	08009290 	.word	0x08009290

080052cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x20>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b0f      	cmp	r3, #15
 80052ea:	d904      	bls.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80052ec:	f640 11d9 	movw	r1, #2521	; 0x9d9
 80052f0:	489d      	ldr	r0, [pc, #628]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80052f2:	f7fb ff44 	bl	800117e <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d060      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d903      	bls.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	2b07      	cmp	r3, #7
 800531c:	d904      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800531e:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8005322:	4891      	ldr	r0, [pc, #580]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005324:	f7fb ff2b 	bl	800117e <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2b31      	cmp	r3, #49	; 0x31
 800532e:	d904      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005338:	d904      	bls.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800533a:	f640 11e1 	movw	r1, #2529	; 0x9e1
 800533e:	488a      	ldr	r0, [pc, #552]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005340:	f7fb ff1d 	bl	800117e <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d903      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b3f      	cmp	r3, #63	; 0x3f
 8005352:	d904      	bls.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8005354:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8005358:	4883      	ldr	r0, [pc, #524]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800535a:	f7fb ff10 	bl	800117e <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800535e:	4b83      	ldr	r3, [pc, #524]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005364:	f7fc f8c8 	bl	80014f8 <HAL_GetTick>
 8005368:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800536c:	f7fc f8c4 	bl	80014f8 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e1ae      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800537e:	4b7c      	ldr	r3, [pc, #496]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	019b      	lsls	r3, r3, #6
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	071b      	lsls	r3, r3, #28
 800539c:	4974      	ldr	r1, [pc, #464]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053a4:	4b71      	ldr	r3, [pc, #452]	; (800556c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053aa:	f7fc f8a5 	bl	80014f8 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80053b2:	f7fc f8a1 	bl	80014f8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e18b      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053c4:	4b6a      	ldr	r3, [pc, #424]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 8174 	beq.w	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e6:	f000 80a6 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053f2:	f000 80a0 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	4a5e      	ldr	r2, [pc, #376]	; (8005574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	f000 809a 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	4a5c      	ldr	r2, [pc, #368]	; (8005578 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005408:	4293      	cmp	r3, r2
 800540a:	f000 8094 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	4a5a      	ldr	r2, [pc, #360]	; (800557c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005414:	4293      	cmp	r3, r2
 8005416:	f000 808e 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4a58      	ldr	r2, [pc, #352]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	f000 8088 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	4a56      	ldr	r2, [pc, #344]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	f000 8082 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	4a54      	ldr	r2, [pc, #336]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d07c      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	4a52      	ldr	r2, [pc, #328]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d077      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	4a51      	ldr	r2, [pc, #324]	; (8005590 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d072      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	4a4f      	ldr	r2, [pc, #316]	; (8005594 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d06d      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	4a4e      	ldr	r2, [pc, #312]	; (8005598 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d068      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	4a4c      	ldr	r2, [pc, #304]	; (800559c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d063      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	4a4b      	ldr	r2, [pc, #300]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d05e      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	4a49      	ldr	r2, [pc, #292]	; (80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d059      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	4a48      	ldr	r2, [pc, #288]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d054      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	4a46      	ldr	r2, [pc, #280]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d04f      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	4a45      	ldr	r2, [pc, #276]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d04a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	4a43      	ldr	r2, [pc, #268]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d045      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	4a42      	ldr	r2, [pc, #264]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d040      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	4a40      	ldr	r2, [pc, #256]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d03b      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	4a3f      	ldr	r2, [pc, #252]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d036      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	4a3d      	ldr	r2, [pc, #244]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d02c      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	4a3a      	ldr	r2, [pc, #232]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d027      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	4a39      	ldr	r2, [pc, #228]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d022      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	4a37      	ldr	r2, [pc, #220]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	4a36      	ldr	r2, [pc, #216]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d018      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	4a34      	ldr	r2, [pc, #208]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	4a33      	ldr	r2, [pc, #204]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	4a31      	ldr	r2, [pc, #196]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	4a30      	ldr	r2, [pc, #192]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800552c:	f640 2112 	movw	r1, #2578	; 0xa12
 8005530:	480d      	ldr	r0, [pc, #52]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005532:	f7fb fe24 	bl	800117e <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	4b0d      	ldr	r3, [pc, #52]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6413      	str	r3, [r2, #64]	; 0x40
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005552:	4b26      	ldr	r3, [pc, #152]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a25      	ldr	r2, [pc, #148]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800555c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800555e:	f7fb ffcb 	bl	80014f8 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005564:	e04d      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005566:	bf00      	nop
 8005568:	08009208 	.word	0x08009208
 800556c:	42470068 	.word	0x42470068
 8005570:	40023800 	.word	0x40023800
 8005574:	00020300 	.word	0x00020300
 8005578:	00030300 	.word	0x00030300
 800557c:	00040300 	.word	0x00040300
 8005580:	00050300 	.word	0x00050300
 8005584:	00060300 	.word	0x00060300
 8005588:	00070300 	.word	0x00070300
 800558c:	00080300 	.word	0x00080300
 8005590:	00090300 	.word	0x00090300
 8005594:	000a0300 	.word	0x000a0300
 8005598:	000b0300 	.word	0x000b0300
 800559c:	000c0300 	.word	0x000c0300
 80055a0:	000d0300 	.word	0x000d0300
 80055a4:	000e0300 	.word	0x000e0300
 80055a8:	000f0300 	.word	0x000f0300
 80055ac:	00100300 	.word	0x00100300
 80055b0:	00110300 	.word	0x00110300
 80055b4:	00120300 	.word	0x00120300
 80055b8:	00130300 	.word	0x00130300
 80055bc:	00140300 	.word	0x00140300
 80055c0:	00150300 	.word	0x00150300
 80055c4:	00160300 	.word	0x00160300
 80055c8:	00170300 	.word	0x00170300
 80055cc:	00180300 	.word	0x00180300
 80055d0:	00190300 	.word	0x00190300
 80055d4:	001a0300 	.word	0x001a0300
 80055d8:	001b0300 	.word	0x001b0300
 80055dc:	001c0300 	.word	0x001c0300
 80055e0:	001d0300 	.word	0x001d0300
 80055e4:	001e0300 	.word	0x001e0300
 80055e8:	001f0300 	.word	0x001f0300
 80055ec:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055f0:	f7fb ff82 	bl	80014f8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e06c      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005602:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800560e:	4b36      	ldr	r3, [pc, #216]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005616:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d02f      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d028      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800562c:	4b2e      	ldr	r3, [pc, #184]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005636:	4b2d      	ldr	r3, [pc, #180]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800563c:	4b2b      	ldr	r3, [pc, #172]	; (80056ec <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005648:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800564a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d114      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005654:	f7fb ff50 	bl	80014f8 <HAL_GetTick>
 8005658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800565a:	e00a      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800565c:	f7fb ff4c 	bl	80014f8 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	f241 3288 	movw	r2, #5000	; 0x1388
 800566a:	4293      	cmp	r3, r2
 800566c:	d901      	bls.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e034      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0ee      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568a:	d10d      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	4911      	ldr	r1, [pc, #68]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
 80056a6:	e005      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	4a0e      	ldr	r2, [pc, #56]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80056ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80056b2:	6093      	str	r3, [r2, #8]
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80056b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c0:	4909      	ldr	r1, [pc, #36]	; (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	7d1a      	ldrb	r2, [r3, #20]
 80056d6:	4b06      	ldr	r3, [pc, #24]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80056d8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40007000 	.word	0x40007000
 80056e8:	40023800 	.word	0x40023800
 80056ec:	42470e40 	.word	0x42470e40
 80056f0:	424711e0 	.word	0x424711e0

080056f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d140      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d131      	bne.n	800578c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005728:	4b1f      	ldr	r3, [pc, #124]	; (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800572a:	617b      	str	r3, [r7, #20]
          break;
 800572c:	e031      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573a:	d109      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800573c:	4b19      	ldr	r3, [pc, #100]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800573e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005746:	4a19      	ldr	r2, [pc, #100]	; (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e008      	b.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005750:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800575c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005760:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005762:	4b10      	ldr	r3, [pc, #64]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005768:	099b      	lsrs	r3, r3, #6
 800576a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	fb02 f303 	mul.w	r3, r2, r3
 8005774:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577c:	0f1b      	lsrs	r3, r3, #28
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	617b      	str	r3, [r7, #20]
          break;
 800578a:	e002      	b.n	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	617b      	str	r3, [r7, #20]
          break;
 8005790:	bf00      	nop
        }
      }
      break;
 8005792:	bf00      	nop
    }
  }
  return frequency;
 8005794:	697b      	ldr	r3, [r7, #20]
}
 8005796:	4618      	mov	r0, r3
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40023800 	.word	0x40023800
 80057a8:	00bb8000 	.word	0x00bb8000
 80057ac:	007a1200 	.word	0x007a1200
 80057b0:	00f42400 	.word	0x00f42400

080057b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e18c      	b.n	8005ae0 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a75      	ldr	r2, [pc, #468]	; (80059a0 <HAL_SPI_Init+0x1ec>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_SPI_Init+0x4e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a73      	ldr	r2, [pc, #460]	; (80059a4 <HAL_SPI_Init+0x1f0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_SPI_Init+0x4e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a72      	ldr	r2, [pc, #456]	; (80059a8 <HAL_SPI_Init+0x1f4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_SPI_Init+0x4e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a70      	ldr	r2, [pc, #448]	; (80059ac <HAL_SPI_Init+0x1f8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_SPI_Init+0x4e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a6f      	ldr	r2, [pc, #444]	; (80059b0 <HAL_SPI_Init+0x1fc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_SPI_Init+0x4e>
 80057f8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80057fc:	486d      	ldr	r0, [pc, #436]	; (80059b4 <HAL_SPI_Init+0x200>)
 80057fe:	f7fb fcbe 	bl	800117e <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_SPI_Init+0x6a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005812:	d004      	beq.n	800581e <HAL_SPI_Init+0x6a>
 8005814:	f240 1143 	movw	r1, #323	; 0x143
 8005818:	4866      	ldr	r0, [pc, #408]	; (80059b4 <HAL_SPI_Init+0x200>)
 800581a:	f7fb fcb0 	bl	800117e <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <HAL_SPI_Init+0x90>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d009      	beq.n	8005844 <HAL_SPI_Init+0x90>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005838:	d004      	beq.n	8005844 <HAL_SPI_Init+0x90>
 800583a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800583e:	485d      	ldr	r0, [pc, #372]	; (80059b4 <HAL_SPI_Init+0x200>)
 8005840:	f7fb fc9d 	bl	800117e <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800584c:	d008      	beq.n	8005860 <HAL_SPI_Init+0xac>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d004      	beq.n	8005860 <HAL_SPI_Init+0xac>
 8005856:	f240 1145 	movw	r1, #325	; 0x145
 800585a:	4856      	ldr	r0, [pc, #344]	; (80059b4 <HAL_SPI_Init+0x200>)
 800585c:	f7fb fc8f 	bl	800117e <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005868:	d00d      	beq.n	8005886 <HAL_SPI_Init+0xd2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_SPI_Init+0xd2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800587a:	d004      	beq.n	8005886 <HAL_SPI_Init+0xd2>
 800587c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005880:	484c      	ldr	r0, [pc, #304]	; (80059b4 <HAL_SPI_Init+0x200>)
 8005882:	f7fb fc7c 	bl	800117e <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d020      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	2b08      	cmp	r3, #8
 8005894:	d01c      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b10      	cmp	r3, #16
 800589c:	d018      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	2b18      	cmp	r3, #24
 80058a4:	d014      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d010      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	2b28      	cmp	r3, #40	; 0x28
 80058b4:	d00c      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	2b30      	cmp	r3, #48	; 0x30
 80058bc:	d008      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	2b38      	cmp	r3, #56	; 0x38
 80058c4:	d004      	beq.n	80058d0 <HAL_SPI_Init+0x11c>
 80058c6:	f240 1147 	movw	r1, #327	; 0x147
 80058ca:	483a      	ldr	r0, [pc, #232]	; (80059b4 <HAL_SPI_Init+0x200>)
 80058cc:	f7fb fc57 	bl	800117e <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <HAL_SPI_Init+0x136>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	2b80      	cmp	r3, #128	; 0x80
 80058de:	d004      	beq.n	80058ea <HAL_SPI_Init+0x136>
 80058e0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80058e4:	4833      	ldr	r0, [pc, #204]	; (80059b4 <HAL_SPI_Init+0x200>)
 80058e6:	f7fb fc4a 	bl	800117e <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d008      	beq.n	8005904 <HAL_SPI_Init+0x150>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	2b10      	cmp	r3, #16
 80058f8:	d004      	beq.n	8005904 <HAL_SPI_Init+0x150>
 80058fa:	f240 1149 	movw	r1, #329	; 0x149
 80058fe:	482d      	ldr	r0, [pc, #180]	; (80059b4 <HAL_SPI_Init+0x200>)
 8005900:	f7fb fc3d 	bl	800117e <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b00      	cmp	r3, #0
 800590a:	d155      	bne.n	80059b8 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_SPI_Init+0x172>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d004      	beq.n	8005926 <HAL_SPI_Init+0x172>
 800591c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8005920:	4824      	ldr	r0, [pc, #144]	; (80059b4 <HAL_SPI_Init+0x200>)
 8005922:	f7fb fc2c 	bl	800117e <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d008      	beq.n	8005940 <HAL_SPI_Init+0x18c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d004      	beq.n	8005940 <HAL_SPI_Init+0x18c>
 8005936:	f240 114d 	movw	r1, #333	; 0x14d
 800593a:	481e      	ldr	r0, [pc, #120]	; (80059b4 <HAL_SPI_Init+0x200>)
 800593c:	f7fb fc1f 	bl	800117e <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005948:	d125      	bne.n	8005996 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d05d      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	2b08      	cmp	r3, #8
 8005958:	d059      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	2b10      	cmp	r3, #16
 8005960:	d055      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	2b18      	cmp	r3, #24
 8005968:	d051      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	2b20      	cmp	r3, #32
 8005970:	d04d      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b28      	cmp	r3, #40	; 0x28
 8005978:	d049      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69db      	ldr	r3, [r3, #28]
 800597e:	2b30      	cmp	r3, #48	; 0x30
 8005980:	d045      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b38      	cmp	r3, #56	; 0x38
 8005988:	d041      	beq.n	8005a0e <HAL_SPI_Init+0x25a>
 800598a:	f240 1151 	movw	r1, #337	; 0x151
 800598e:	4809      	ldr	r0, [pc, #36]	; (80059b4 <HAL_SPI_Init+0x200>)
 8005990:	f7fb fbf5 	bl	800117e <assert_failed>
 8005994:	e03b      	b.n	8005a0e <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	61da      	str	r2, [r3, #28]
 800599c:	e037      	b.n	8005a0e <HAL_SPI_Init+0x25a>
 800599e:	bf00      	nop
 80059a0:	40013000 	.word	0x40013000
 80059a4:	40003800 	.word	0x40003800
 80059a8:	40003c00 	.word	0x40003c00
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40015000 	.word	0x40015000
 80059b4:	08009244 	.word	0x08009244
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d020      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d01c      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d018      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	2b18      	cmp	r3, #24
 80059d6:	d014      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	2b20      	cmp	r3, #32
 80059de:	d010      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	2b28      	cmp	r3, #40	; 0x28
 80059e6:	d00c      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d008      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	2b38      	cmp	r3, #56	; 0x38
 80059f6:	d004      	beq.n	8005a02 <HAL_SPI_Init+0x24e>
 80059f8:	f240 115b 	movw	r1, #347	; 0x15b
 80059fc:	483a      	ldr	r0, [pc, #232]	; (8005ae8 <HAL_SPI_Init+0x334>)
 80059fe:	f7fb fbbe 	bl	800117e <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7fb fbe9 	bl	8001200 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a56:	431a      	orrs	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a92:	ea42 0103 	orr.w	r1, r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	0c1b      	lsrs	r3, r3, #16
 8005aac:	f003 0104 	and.w	r1, r3, #4
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab4:	f003 0210 	and.w	r2, r3, #16
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69da      	ldr	r2, [r3, #28]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ace:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	08009244 	.word	0x08009244

08005aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aec:	b084      	sub	sp, #16
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	f107 001c 	add.w	r0, r7, #28
 8005afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d122      	bne.n	8005b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f9a0 	bl	8005e84 <USB_CoreReset>
 8005b44:	4603      	mov	r3, r0
 8005b46:	73fb      	strb	r3, [r7, #15]
 8005b48:	e01a      	b.n	8005b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f994 	bl	8005e84 <USB_CoreReset>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d106      	bne.n	8005b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
 8005b72:	e005      	b.n	8005b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10b      	bne.n	8005b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f043 0206 	orr.w	r2, r3, #6
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005baa:	b004      	add	sp, #16
 8005bac:	4770      	bx	lr

08005bae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f043 0201 	orr.w	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f023 0201 	bic.w	r2, r3, #1
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	370c      	adds	r7, #12
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d115      	bne.n	8005c40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c20:	2001      	movs	r0, #1
 8005c22:	f7fb fc75 	bl	8001510 <HAL_Delay>
      ms++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f91a 	bl	8005e66 <USB_GetMode>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d01e      	beq.n	8005c76 <USB_SetCurrentMode+0x84>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b31      	cmp	r3, #49	; 0x31
 8005c3c:	d9f0      	bls.n	8005c20 <USB_SetCurrentMode+0x2e>
 8005c3e:	e01a      	b.n	8005c76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d115      	bne.n	8005c72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f7fb fc5c 	bl	8001510 <HAL_Delay>
      ms++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f901 	bl	8005e66 <USB_GetMode>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <USB_SetCurrentMode+0x84>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b31      	cmp	r3, #49	; 0x31
 8005c6e:	d9f0      	bls.n	8005c52 <USB_SetCurrentMode+0x60>
 8005c70:	e001      	b.n	8005c76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e005      	b.n	8005c82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b32      	cmp	r3, #50	; 0x32
 8005c7a:	d101      	bne.n	8005c80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	f043 0220 	orr.w	r2, r3, #32
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <USB_FlushTxFifo+0x44>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e006      	b.n	8005cc4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d0f1      	beq.n	8005ca6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	00030d40 	.word	0x00030d40

08005cd4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <USB_FlushRxFifo+0x3c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e006      	b.n	8005d04 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d0f1      	beq.n	8005ce6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	00030d40 	.word	0x00030d40

08005d14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b089      	sub	sp, #36	; 0x24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4611      	mov	r1, r2
 8005d20:	461a      	mov	r2, r3
 8005d22:	460b      	mov	r3, r1
 8005d24:	71fb      	strb	r3, [r7, #7]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d123      	bne.n	8005d82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d3a:	88bb      	ldrh	r3, [r7, #4]
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e018      	b.n	8005d7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	031a      	lsls	r2, r3, #12
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d54:	461a      	mov	r2, r3
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3301      	adds	r3, #1
 8005d66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	3301      	adds	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	3301      	adds	r3, #1
 8005d78:	61bb      	str	r3, [r7, #24]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d3e2      	bcc.n	8005d48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3724      	adds	r7, #36	; 0x24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b08b      	sub	sp, #44	; 0x2c
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005da6:	88fb      	ldrh	r3, [r7, #6]
 8005da8:	089b      	lsrs	r3, r3, #2
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005dae:	88fb      	ldrh	r3, [r7, #6]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005db6:	2300      	movs	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	e014      	b.n	8005de6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	3301      	adds	r3, #1
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	3301      	adds	r3, #1
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	3301      	adds	r3, #1
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	6a3a      	ldr	r2, [r7, #32]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d3e6      	bcc.n	8005dbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dee:	8bfb      	ldrh	r3, [r7, #30]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d01e      	beq.n	8005e32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f107 0310 	add.w	r3, r7, #16
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e18:	701a      	strb	r2, [r3, #0]
      i++;
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	3301      	adds	r3, #1
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e26:	8bfb      	ldrh	r3, [r7, #30]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e2c:	8bfb      	ldrh	r3, [r7, #30]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1ea      	bne.n	8005e08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	372c      	adds	r7, #44	; 0x2c
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0301 	and.w	r3, r3, #1
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
	...

08005e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	3301      	adds	r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <USB_CoreReset+0x60>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d901      	bls.n	8005ea0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e01a      	b.n	8005ed6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	daf3      	bge.n	8005e90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f043 0201 	orr.w	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <USB_CoreReset+0x60>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e006      	b.n	8005ed6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d0f1      	beq.n	8005eb8 <USB_CoreReset+0x34>

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	00030d40 	.word	0x00030d40

08005ee8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ee8:	b084      	sub	sp, #16
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	f107 001c 	add.w	r0, r7, #28
 8005ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f04:	461a      	mov	r2, r3
 8005f06:	2300      	movs	r3, #0
 8005f08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d018      	beq.n	8005f6c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d10a      	bne.n	8005f56 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	e014      	b.n	8005f80 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f64:	f023 0304 	bic.w	r3, r3, #4
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	e009      	b.n	8005f80 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005f7a:	f023 0304 	bic.w	r3, r3, #4
 8005f7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005f80:	2110      	movs	r1, #16
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff fe82 	bl	8005c8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fea3 	bl	8005cd4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
 8005f92:	e015      	b.n	8005fc0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d3e5      	bcc.n	8005f94 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00b      	beq.n	8005ffa <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <USB_HostInit+0x154>)
 8005fee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a13      	ldr	r2, [pc, #76]	; (8006040 <USB_HostInit+0x158>)
 8005ff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ff8:	e009      	b.n	800600e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2280      	movs	r2, #128	; 0x80
 8005ffe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <USB_HostInit+0x15c>)
 8006004:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a0f      	ldr	r2, [pc, #60]	; (8006048 <USB_HostInit+0x160>)
 800600a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d105      	bne.n	8006020 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f043 0210 	orr.w	r2, r3, #16
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	4b09      	ldr	r3, [pc, #36]	; (800604c <USB_HostInit+0x164>)
 8006026:	4313      	orrs	r3, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006038:	b004      	add	sp, #16
 800603a:	4770      	bx	lr
 800603c:	01000200 	.word	0x01000200
 8006040:	00e00300 	.word	0x00e00300
 8006044:	00600080 	.word	0x00600080
 8006048:	004000e0 	.word	0x004000e0
 800604c:	a3200008 	.word	0xa3200008

08006050 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800606e:	f023 0303 	bic.w	r3, r3, #3
 8006072:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	68f9      	ldr	r1, [r7, #12]
 8006084:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006088:	4313      	orrs	r3, r2
 800608a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d107      	bne.n	80060a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006098:	461a      	mov	r2, r3
 800609a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800609e:	6053      	str	r3, [r2, #4]
 80060a0:	e009      	b.n	80060b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d106      	bne.n	80060b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ae:	461a      	mov	r2, r3
 80060b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80060b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80060e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80060f4:	2064      	movs	r0, #100	; 0x64
 80060f6:	f7fb fa0b 	bl	8001510 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006102:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006106:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006108:	200a      	movs	r0, #10
 800610a:	f7fb fa01 	bl	8001510 <HAL_Delay>

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800613c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <USB_DriveVbus+0x44>
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d106      	bne.n	800615c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800615a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006166:	d109      	bne.n	800617c <USB_DriveVbus+0x64>
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800617a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800618a:	b480      	push	{r7}
 800618c:	b085      	sub	sp, #20
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	0c5b      	lsrs	r3, r3, #17
 80061a8:	f003 0303 	and.w	r3, r3, #3
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	b29b      	uxth	r3, r3
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	4608      	mov	r0, r1
 80061e6:	4611      	mov	r1, r2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	70fb      	strb	r3, [r7, #3]
 80061ee:	460b      	mov	r3, r1
 80061f0:	70bb      	strb	r3, [r7, #2]
 80061f2:	4613      	mov	r3, r2
 80061f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	461a      	mov	r2, r3
 800620c:	f04f 33ff 	mov.w	r3, #4294967295
 8006210:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006212:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006216:	2b03      	cmp	r3, #3
 8006218:	d87e      	bhi.n	8006318 <USB_HC_Init+0x13c>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <USB_HC_Init+0x44>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	080062db 	.word	0x080062db
 8006228:	08006231 	.word	0x08006231
 800622c:	0800629d 	.word	0x0800629d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623c:	461a      	mov	r2, r3
 800623e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006242:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006244:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006248:	2b00      	cmp	r3, #0
 800624a:	da10      	bge.n	800626e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	4413      	add	r3, r2
 8006254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	78fa      	ldrb	r2, [r7, #3]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	440a      	add	r2, r1
 8006262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800626c:	e057      	b.n	800631e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006276:	2b00      	cmp	r3, #0
 8006278:	d051      	beq.n	800631e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800627a:	78fb      	ldrb	r3, [r7, #3]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4413      	add	r3, r2
 8006282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	440a      	add	r2, r1
 8006290:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006294:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006298:	60d3      	str	r3, [r2, #12]
      break;
 800629a:	e040      	b.n	800631e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	461a      	mov	r2, r3
 80062aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80062ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	da34      	bge.n	8006322 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80062d8:	e023      	b.n	8006322 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e6:	461a      	mov	r2, r3
 80062e8:	f240 2325 	movw	r3, #549	; 0x225
 80062ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80062ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da17      	bge.n	8006326 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	78fa      	ldrb	r2, [r7, #3]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	440a      	add	r2, r1
 800630c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006310:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006314:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006316:	e006      	b.n	8006326 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	77fb      	strb	r3, [r7, #31]
      break;
 800631c:	e004      	b.n	8006328 <USB_HC_Init+0x14c>
      break;
 800631e:	bf00      	nop
 8006320:	e002      	b.n	8006328 <USB_HC_Init+0x14c>
      break;
 8006322:	bf00      	nop
 8006324:	e000      	b.n	8006328 <USB_HC_Init+0x14c>
      break;
 8006326:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	78fb      	ldrb	r3, [r7, #3]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	2101      	movs	r1, #1
 8006338:	fa01 f303 	lsl.w	r3, r1, r3
 800633c:	6939      	ldr	r1, [r7, #16]
 800633e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006342:	4313      	orrs	r3, r2
 8006344:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006352:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006356:	2b00      	cmp	r3, #0
 8006358:	da03      	bge.n	8006362 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800635a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635e:	61bb      	str	r3, [r7, #24]
 8006360:	e001      	b.n	8006366 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff ff0f 	bl	800618a <USB_GetHostSpeed>
 800636c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800636e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006372:	2b02      	cmp	r3, #2
 8006374:	d106      	bne.n	8006384 <USB_HC_Init+0x1a8>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d003      	beq.n	8006384 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800637c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e001      	b.n	8006388 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006388:	787b      	ldrb	r3, [r7, #1]
 800638a:	059b      	lsls	r3, r3, #22
 800638c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006390:	78bb      	ldrb	r3, [r7, #2]
 8006392:	02db      	lsls	r3, r3, #11
 8006394:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006398:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800639a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800639e:	049b      	lsls	r3, r3, #18
 80063a0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80063a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80063a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80063ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	0159      	lsls	r1, r3, #5
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	440b      	add	r3, r1
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80063c4:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80063c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d10f      	bne.n	80063ee <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	78fa      	ldrb	r2, [r7, #3]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08c      	sub	sp, #48	; 0x30
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	4613      	mov	r3, r2
 8006404:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006414:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d02d      	beq.n	800647e <USB_HC_StartXfer+0x86>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	791b      	ldrb	r3, [r3, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d129      	bne.n	800647e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d117      	bne.n	8006460 <USB_HC_StartXfer+0x68>
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	79db      	ldrb	r3, [r3, #7]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <USB_HC_StartXfer+0x48>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	79db      	ldrb	r3, [r3, #7]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d10f      	bne.n	8006460 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	6a3b      	ldr	r3, [r7, #32]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	69fa      	ldr	r2, [r7, #28]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	6a3a      	ldr	r2, [r7, #32]
 8006454:	440a      	add	r2, r1
 8006456:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <USB_HC_StartXfer+0x86>
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	795b      	ldrb	r3, [r3, #5]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d107      	bne.n	800647e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	785b      	ldrb	r3, [r3, #1]
 8006472:	4619      	mov	r1, r3
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fa2f 	bl	80068d8 <USB_DoPing>
      return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e0f8      	b.n	8006670 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d018      	beq.n	80064b8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	8912      	ldrh	r2, [r2, #8]
 800648e:	4413      	add	r3, r2
 8006490:	3b01      	subs	r3, #1
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	8912      	ldrh	r2, [r2, #8]
 8006496:	fbb3 f3f2 	udiv	r3, r3, r2
 800649a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800649c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800649e:	8b7b      	ldrh	r3, [r7, #26]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d90b      	bls.n	80064bc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80064a4:	8b7b      	ldrh	r3, [r7, #26]
 80064a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	8912      	ldrh	r2, [r2, #8]
 80064ae:	fb02 f203 	mul.w	r2, r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	611a      	str	r2, [r3, #16]
 80064b6:	e001      	b.n	80064bc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80064b8:	2301      	movs	r3, #1
 80064ba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	8912      	ldrh	r2, [r2, #8]
 80064ca:	fb02 f203 	mul.w	r2, r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	611a      	str	r2, [r3, #16]
 80064d2:	e003      	b.n	80064dc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064e6:	04d9      	lsls	r1, r3, #19
 80064e8:	4b63      	ldr	r3, [pc, #396]	; (8006678 <USB_HC_StartXfer+0x280>)
 80064ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	7a9b      	ldrb	r3, [r3, #10]
 80064f2:	075b      	lsls	r3, r3, #29
 80064f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064f8:	69f9      	ldr	r1, [r7, #28]
 80064fa:	0148      	lsls	r0, r1, #5
 80064fc:	6a39      	ldr	r1, [r7, #32]
 80064fe:	4401      	add	r1, r0
 8006500:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006504:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006506:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	68d9      	ldr	r1, [r3, #12]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651e:	460a      	mov	r2, r1
 8006520:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	6a3a      	ldr	r2, [r7, #32]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006558:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	7e7b      	ldrb	r3, [r7, #25]
 800656a:	075b      	lsls	r3, r3, #29
 800656c:	69f9      	ldr	r1, [r7, #28]
 800656e:	0148      	lsls	r0, r1, #5
 8006570:	6a39      	ldr	r1, [r7, #32]
 8006572:	4401      	add	r1, r0
 8006574:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006578:	4313      	orrs	r3, r2
 800657a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006592:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	78db      	ldrb	r3, [r3, #3]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d004      	beq.n	80065a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e003      	b.n	80065ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	461a      	mov	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e04e      	b.n	8006670 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	78db      	ldrb	r3, [r3, #3]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d149      	bne.n	800666e <USB_HC_StartXfer+0x276>
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d045      	beq.n	800666e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	79db      	ldrb	r3, [r3, #7]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d830      	bhi.n	800664c <USB_HC_StartXfer+0x254>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <USB_HC_StartXfer+0x1f8>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006601 	.word	0x08006601
 80065fc:	08006625 	.word	0x08006625
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	3303      	adds	r3, #3
 8006606:	089b      	lsrs	r3, r3, #2
 8006608:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800660a:	8afa      	ldrh	r2, [r7, #22]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	b29b      	uxth	r3, r3
 8006612:	429a      	cmp	r2, r3
 8006614:	d91c      	bls.n	8006650 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	619a      	str	r2, [r3, #24]
        }
        break;
 8006622:	e015      	b.n	8006650 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	3303      	adds	r3, #3
 800662a:	089b      	lsrs	r3, r3, #2
 800662c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800662e:	8afa      	ldrh	r2, [r7, #22]
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	b29b      	uxth	r3, r3
 800663a:	429a      	cmp	r2, r3
 800663c:	d90a      	bls.n	8006654 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	619a      	str	r2, [r3, #24]
        }
        break;
 800664a:	e003      	b.n	8006654 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800664c:	bf00      	nop
 800664e:	e002      	b.n	8006656 <USB_HC_StartXfer+0x25e>
        break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <USB_HC_StartXfer+0x25e>
        break;
 8006654:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	68d9      	ldr	r1, [r3, #12]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	785a      	ldrb	r2, [r3, #1]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	b29b      	uxth	r3, r3
 8006664:	2000      	movs	r0, #0
 8006666:	9000      	str	r0, [sp, #0]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff fb53 	bl	8005d14 <USB_WritePacket>
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	; 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	1ff80000 	.word	0x1ff80000

0800667c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	b29b      	uxth	r3, r3
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800669e:	b480      	push	{r7}
 80066a0:	b089      	sub	sp, #36	; 0x24
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	0c9b      	lsrs	r3, r3, #18
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	0fdb      	lsrs	r3, r3, #31
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d104      	bne.n	80066f8 <USB_HC_Halt+0x5a>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e0e8      	b.n	80068ca <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <USB_HC_Halt+0x66>
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b02      	cmp	r3, #2
 8006702:	d173      	bne.n	80067ec <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	4413      	add	r3, r2
 800670c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	440a      	add	r2, r1
 800671a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800671e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006722:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0320 	and.w	r3, r3, #32
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 80cb 	bne.w	80068c8 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d143      	bne.n	80067c6 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	4413      	add	r3, r2
 8006746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	697a      	ldr	r2, [r7, #20]
 800674e:	0151      	lsls	r1, r2, #5
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	440a      	add	r2, r1
 8006754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800675c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	0151      	lsls	r1, r2, #5
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	440a      	add	r2, r1
 8006774:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	4413      	add	r3, r2
 8006786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	440a      	add	r2, r1
 8006794:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006798:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800679c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	3301      	adds	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067aa:	d81d      	bhi.n	80067e8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067c2:	d0ec      	beq.n	800679e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067c4:	e080      	b.n	80068c8 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067e6:	e06f      	b.n	80068c8 <USB_HC_Halt+0x22a>
            break;
 80067e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067ea:	e06d      	b.n	80068c8 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	440a      	add	r2, r1
 8006802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800680a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d143      	bne.n	80068a4 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800683a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	4413      	add	r3, r2
 8006844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	0151      	lsls	r1, r2, #5
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	440a      	add	r2, r1
 8006852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800685a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	4413      	add	r3, r2
 8006864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	440a      	add	r2, r1
 8006872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006876:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800687a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	3301      	adds	r3, #1
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006888:	d81d      	bhi.n	80068c6 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	4413      	add	r3, r2
 8006892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a0:	d0ec      	beq.n	800687c <USB_HC_Halt+0x1de>
 80068a2:	e011      	b.n	80068c8 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e000      	b.n	80068c8 <USB_HC_Halt+0x22a>
          break;
 80068c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3724      	adds	r7, #36	; 0x24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80068ec:	2301      	movs	r3, #1
 80068ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	04da      	lsls	r2, r3, #19
 80068f4:	4b15      	ldr	r3, [pc, #84]	; (800694c <USB_DoPing+0x74>)
 80068f6:	4013      	ands	r3, r2
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	0151      	lsls	r1, r2, #5
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	440a      	add	r2, r1
 8006900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006908:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006920:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006928:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	4413      	add	r3, r2
 8006932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006936:	461a      	mov	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	1ff80000 	.word	0x1ff80000

08006950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff f935 	bl	8005bd0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006966:	2110      	movs	r1, #16
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff f98f 	bl	8005c8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff f9b0 	bl	8005cd4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	e01f      	b.n	80069ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006990:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006998:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	015a      	lsls	r2, r3, #5
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4413      	add	r3, r2
 80069aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ae:	461a      	mov	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	3301      	adds	r3, #1
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d9dc      	bls.n	800697a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	613b      	str	r3, [r7, #16]
 80069c4:	e034      	b.n	8006a30 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	3301      	adds	r3, #1
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a0c:	d80c      	bhi.n	8006a28 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a24:	d0ec      	beq.n	8006a00 <USB_StopHost+0xb0>
 8006a26:	e000      	b.n	8006a2a <USB_StopHost+0xda>
        break;
 8006a28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	613b      	str	r3, [r7, #16]
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	2b0f      	cmp	r3, #15
 8006a34:	d9c7      	bls.n	80069c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff f8ae 	bl	8005bae <USB_EnableGlobalInt>

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3718      	adds	r7, #24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006a5c:	b590      	push	{r4, r7, lr}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af04      	add	r7, sp, #16
 8006a62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006a64:	2301      	movs	r3, #1
 8006a66:	2202      	movs	r2, #2
 8006a68:	2102      	movs	r1, #2
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fc66 	bl	800733c <USBH_FindInterface>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2bff      	cmp	r3, #255	; 0xff
 8006a78:	d002      	beq.n	8006a80 <USBH_CDC_InterfaceInit+0x24>
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d901      	bls.n	8006a84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006a80:	2302      	movs	r3, #2
 8006a82:	e13d      	b.n	8006d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
 8006a86:	4619      	mov	r1, r3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fc3b 	bl	8007304 <USBH_SelectInterface>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e131      	b.n	8006d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006aa2:	2050      	movs	r0, #80	; 0x50
 8006aa4:	f002 fa00 	bl	8008ea8 <malloc>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006abc:	2302      	movs	r3, #2
 8006abe:	e11f      	b.n	8006d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ac0:	2250      	movs	r2, #80	; 0x50
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	68b8      	ldr	r0, [r7, #8]
 8006ac6:	f002 f9ff 	bl	8008ec8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	211a      	movs	r1, #26
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	da15      	bge.n	8006b0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	211a      	movs	r1, #26
 8006ae8:	fb01 f303 	mul.w	r3, r1, r3
 8006aec:	4413      	add	r3, r2
 8006aee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	211a      	movs	r1, #26
 8006afe:	fb01 f303 	mul.w	r3, r1, r3
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	785b      	ldrb	r3, [r3, #1]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 fe32 	bl	800877e <USBH_AllocPipe>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	7819      	ldrb	r1, [r3, #0]
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	7858      	ldrb	r0, [r3, #1]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	8952      	ldrh	r2, [r2, #10]
 8006b3a:	9202      	str	r2, [sp, #8]
 8006b3c:	2203      	movs	r2, #3
 8006b3e:	9201      	str	r2, [sp, #4]
 8006b40:	9300      	str	r3, [sp, #0]
 8006b42:	4623      	mov	r3, r4
 8006b44:	4602      	mov	r2, r0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fdea 	bl	8008720 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2200      	movs	r2, #0
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f002 f8f9 	bl	8008d4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	210a      	movs	r1, #10
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fbeb 	bl	800733c <USBH_FindInterface>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2bff      	cmp	r3, #255	; 0xff
 8006b6e:	d002      	beq.n	8006b76 <USBH_CDC_InterfaceInit+0x11a>
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d901      	bls.n	8006b7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b76:	2302      	movs	r3, #2
 8006b78:	e0c2      	b.n	8006d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	211a      	movs	r1, #26
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da16      	bge.n	8006bc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	211a      	movs	r1, #26
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	211a      	movs	r1, #26
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bb8:	881a      	ldrh	r2, [r3, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	835a      	strh	r2, [r3, #26]
 8006bbe:	e015      	b.n	8006bec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	211a      	movs	r1, #26
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	4413      	add	r3, r2
 8006bcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	211a      	movs	r1, #26
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006be6:	881a      	ldrh	r2, [r3, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	211a      	movs	r1, #26
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	b25b      	sxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	da16      	bge.n	8006c32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	211a      	movs	r1, #26
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c14:	781a      	ldrb	r2, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c1a:	7bfb      	ldrb	r3, [r7, #15]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	211a      	movs	r1, #26
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c2a:	881a      	ldrh	r2, [r3, #0]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	835a      	strh	r2, [r3, #26]
 8006c30:	e015      	b.n	8006c5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	211a      	movs	r1, #26
 8006c38:	fb01 f303 	mul.w	r3, r1, r3
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	211a      	movs	r1, #26
 8006c4e:	fb01 f303 	mul.w	r3, r1, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006c58:	881a      	ldrh	r2, [r3, #0]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	7b9b      	ldrb	r3, [r3, #14]
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fd8a 	bl	800877e <USBH_AllocPipe>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	7bdb      	ldrb	r3, [r3, #15]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fd80 	bl	800877e <USBH_AllocPipe>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	7b59      	ldrb	r1, [r3, #13]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	7b98      	ldrb	r0, [r3, #14]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	8b12      	ldrh	r2, [r2, #24]
 8006c9e:	9202      	str	r2, [sp, #8]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	9201      	str	r2, [sp, #4]
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fd38 	bl	8008720 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	7b19      	ldrb	r1, [r3, #12]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	7bd8      	ldrb	r0, [r3, #15]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	8b52      	ldrh	r2, [r2, #26]
 8006cc8:	9202      	str	r2, [sp, #8]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	9201      	str	r2, [sp, #4]
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	4623      	mov	r3, r4
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 fd23 	bl	8008720 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	7b5b      	ldrb	r3, [r3, #13]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f002 f82e 	bl	8008d4c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	7b1b      	ldrb	r3, [r3, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f002 f827 	bl	8008d4c <USBH_LL_SetToggle>

  return USBH_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd90      	pop	{r4, r7, pc}

08006d08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00e      	beq.n	8006d40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fd18 	bl	800875e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fd43 	bl	80087c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7b1b      	ldrb	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00e      	beq.n	8006d66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	7b1b      	ldrb	r3, [r3, #12]
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fd05 	bl	800875e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	7b1b      	ldrb	r3, [r3, #12]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fd30 	bl	80087c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	7b5b      	ldrb	r3, [r3, #13]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00e      	beq.n	8006d8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	7b5b      	ldrb	r3, [r3, #13]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fcf2 	bl	800875e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	7b5b      	ldrb	r3, [r3, #13]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f001 fd1d 	bl	80087c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f002 f889 	bl	8008eb8 <free>
    phost->pActiveClass->pData = 0U;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dac:	2200      	movs	r2, #0
 8006dae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	3340      	adds	r3, #64	; 0x40
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8b1 	bl	8006f3a <GetLineCoding>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ddc:	7afb      	ldrb	r3, [r7, #11]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d105      	bne.n	8006dee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006de8:	2102      	movs	r1, #2
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006dee:	7afb      	ldrb	r3, [r7, #11]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d877      	bhi.n	8006f0c <USBH_CDC_Process+0x114>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <USBH_CDC_Process+0x2c>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e39 	.word	0x08006e39
 8006e28:	08006e3f 	.word	0x08006e3f
 8006e2c:	08006e6f 	.word	0x08006e6f
 8006e30:	08006ee3 	.word	0x08006ee3
 8006e34:	08006ef1 	.word	0x08006ef1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3c:	e06d      	b.n	8006f1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f897 	bl	8006f78 <SetLineCoding>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006e5c:	e058      	b.n	8006f10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d055      	beq.n	8006f10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2204      	movs	r2, #4
 8006e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006e6c:	e050      	b.n	8006f10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	3340      	adds	r3, #64	; 0x40
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 f860 	bl	8006f3a <GetLineCoding>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d126      	bne.n	8006ed2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e96:	791b      	ldrb	r3, [r3, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d13b      	bne.n	8006f14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d133      	bne.n	8006f14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d12b      	bne.n	8006f14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d124      	bne.n	8006f14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f958 	bl	8007180 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ed0:	e020      	b.n	8006f14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d01d      	beq.n	8006f14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2204      	movs	r2, #4
 8006edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006ee0:	e018      	b.n	8006f14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f867 	bl	8006fb6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f8da 	bl	80070a2 <CDC_ProcessReception>
      break;
 8006eee:	e014      	b.n	8006f1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 ffe3 	bl	8007ebe <USBH_ClrFeature>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006f0a:	e005      	b.n	8006f18 <USBH_CDC_Process+0x120>

    default:
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e004      	b.n	8006f1a <USBH_CDC_Process+0x122>
      break;
 8006f10:	bf00      	nop
 8006f12:	e002      	b.n	8006f1a <USBH_CDC_Process+0x122>
      break;
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <USBH_CDC_Process+0x122>
      break;
 8006f18:	bf00      	nop

  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	22a1      	movs	r2, #161	; 0xa1
 8006f48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2221      	movs	r2, #33	; 0x21
 8006f4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2207      	movs	r2, #7
 8006f60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2207      	movs	r2, #7
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 f988 	bl	800827e <USBH_CtlReq>
 8006f6e:	4603      	mov	r3, r0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2221      	movs	r2, #33	; 0x21
 8006f86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2207      	movs	r2, #7
 8006f9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2207      	movs	r2, #7
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f001 f969 	bl	800827e <USBH_CtlReq>
 8006fac:	4603      	mov	r3, r0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af02      	add	r7, sp, #8
 8006fbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d002      	beq.n	8006fdc <CDC_ProcessTransmission+0x26>
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d023      	beq.n	8007022 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006fda:	e05e      	b.n	800709a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	8b12      	ldrh	r2, [r2, #24]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d90b      	bls.n	8007000 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	69d9      	ldr	r1, [r3, #28]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8b1a      	ldrh	r2, [r3, #24]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	7b5b      	ldrb	r3, [r3, #13]
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	9000      	str	r0, [sp, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 fb4e 	bl	800869a <USBH_BulkSendData>
 8006ffe:	e00b      	b.n	8007018 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007008:	b29a      	uxth	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	7b5b      	ldrb	r3, [r3, #13]
 800700e:	2001      	movs	r0, #1
 8007010:	9000      	str	r0, [sp, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fb41 	bl	800869a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007020:	e03b      	b.n	800709a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	7b5b      	ldrb	r3, [r3, #13]
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 fe65 	bl	8008cf8 <USBH_LL_GetURBState>
 800702e:	4603      	mov	r3, r0
 8007030:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007032:	7afb      	ldrb	r3, [r7, #11]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d128      	bne.n	800708a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	8b12      	ldrh	r2, [r2, #24]
 8007040:	4293      	cmp	r3, r2
 8007042:	d90e      	bls.n	8007062 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	8b12      	ldrh	r2, [r2, #24]
 800704c:	1a9a      	subs	r2, r3, r2
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	8b12      	ldrh	r2, [r2, #24]
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	61da      	str	r2, [r3, #28]
 8007060:	e002      	b.n	8007068 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007078:	e00e      	b.n	8007098 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f868 	bl	8007158 <USBH_CDC_TransmitCallback>
      break;
 8007088:	e006      	b.n	8007098 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800708a:	7afb      	ldrb	r3, [r7, #11]
 800708c:	2b02      	cmp	r3, #2
 800708e:	d103      	bne.n	8007098 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007098:	bf00      	nop
  }
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b086      	sub	sp, #24
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070b4:	2300      	movs	r3, #0
 80070b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80070be:	2b03      	cmp	r3, #3
 80070c0:	d002      	beq.n	80070c8 <CDC_ProcessReception+0x26>
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d00e      	beq.n	80070e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80070c6:	e043      	b.n	8007150 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	6a19      	ldr	r1, [r3, #32]
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	8b5a      	ldrh	r2, [r3, #26]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	7b1b      	ldrb	r3, [r3, #12]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 fb05 	bl	80086e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2204      	movs	r2, #4
 80070de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80070e2:	e035      	b.n	8007150 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	7b1b      	ldrb	r3, [r3, #12]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 fe04 	bl	8008cf8 <USBH_LL_GetURBState>
 80070f0:	4603      	mov	r3, r0
 80070f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80070f4:	7cfb      	ldrb	r3, [r7, #19]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d129      	bne.n	800714e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	7b1b      	ldrb	r3, [r3, #12]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f001 fd67 	bl	8008bd4 <USBH_LL_GetLastXferSize>
 8007106:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	429a      	cmp	r2, r3
 8007110:	d016      	beq.n	8007140 <CDC_ProcessReception+0x9e>
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	8b5b      	ldrh	r3, [r3, #26]
 8007116:	461a      	mov	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4293      	cmp	r3, r2
 800711c:	d910      	bls.n	8007140 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	6a1a      	ldr	r2, [r3, #32]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	441a      	add	r2, r3
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2203      	movs	r2, #3
 800713a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800713e:	e006      	b.n	800714e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f80f 	bl	800716c <USBH_CDC_ReceiveCallback>
      break;
 800714e:	bf00      	nop
  }
}
 8007150:	bf00      	nop
 8007152:	3718      	adds	r7, #24
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80071a8:	2302      	movs	r3, #2
 80071aa:	e029      	b.n	8007200 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	79fa      	ldrb	r2, [r7, #7]
 80071b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f81f 	bl	8007208 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f001 fc37 	bl	8008a6c <USBH_LL_Init>

  return USBH_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e009      	b.n	800722e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	33e0      	adds	r3, #224	; 0xe0
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	2200      	movs	r2, #0
 8007226:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b0e      	cmp	r3, #14
 8007232:	d9f2      	bls.n	800721a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e009      	b.n	800724e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007254:	d3f1      	bcc.n	800723a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2240      	movs	r2, #64	; 0x40
 800727a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d016      	beq.n	80072f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10e      	bne.n	80072ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80072d4:	1c59      	adds	r1, r3, #1
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	33de      	adds	r3, #222	; 0xde
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	e004      	b.n	80072f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80072ec:	2302      	movs	r3, #2
 80072ee:	73fb      	strb	r3, [r7, #15]
 80072f0:	e001      	b.n	80072f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80072f2:	2302      	movs	r3, #2
 80072f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	429a      	cmp	r2, r3
 800731e:	d204      	bcs.n	800732a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	78fa      	ldrb	r2, [r7, #3]
 8007324:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007328:	e001      	b.n	800732e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800732a:	2302      	movs	r3, #2
 800732c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	4608      	mov	r0, r1
 8007346:	4611      	mov	r1, r2
 8007348:	461a      	mov	r2, r3
 800734a:	4603      	mov	r3, r0
 800734c:	70fb      	strb	r3, [r7, #3]
 800734e:	460b      	mov	r3, r1
 8007350:	70bb      	strb	r3, [r7, #2]
 8007352:	4613      	mov	r3, r2
 8007354:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007356:	2300      	movs	r3, #0
 8007358:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007364:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007366:	e025      	b.n	80073b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	221a      	movs	r2, #26
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	3308      	adds	r3, #8
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	3302      	adds	r3, #2
 8007378:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	795b      	ldrb	r3, [r3, #5]
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	429a      	cmp	r2, r3
 8007382:	d002      	beq.n	800738a <USBH_FindInterface+0x4e>
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d111      	bne.n	80073ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800738e:	78ba      	ldrb	r2, [r7, #2]
 8007390:	429a      	cmp	r2, r3
 8007392:	d002      	beq.n	800739a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007394:	78bb      	ldrb	r3, [r7, #2]
 8007396:	2bff      	cmp	r3, #255	; 0xff
 8007398:	d109      	bne.n	80073ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800739e:	787a      	ldrb	r2, [r7, #1]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d002      	beq.n	80073aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80073a4:	787b      	ldrb	r3, [r7, #1]
 80073a6:	2bff      	cmp	r3, #255	; 0xff
 80073a8:	d101      	bne.n	80073ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	e006      	b.n	80073bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
 80073b0:	3301      	adds	r3, #1
 80073b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073b4:	7dfb      	ldrb	r3, [r7, #23]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d9d6      	bls.n	8007368 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80073ba:	23ff      	movs	r3, #255	; 0xff
}
 80073bc:	4618      	mov	r0, r3
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fb87 	bl	8008ae4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80073d6:	2101      	movs	r1, #1
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 fca0 	bl	8008d1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af04      	add	r7, sp, #16
 80073ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80073f0:	2302      	movs	r3, #2
 80073f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d102      	bne.n	800740a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2203      	movs	r2, #3
 8007408:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b0b      	cmp	r3, #11
 8007412:	f200 81b3 	bhi.w	800777c <USBH_Process+0x394>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <USBH_Process+0x34>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	0800744d 	.word	0x0800744d
 8007420:	0800747f 	.word	0x0800747f
 8007424:	080074e7 	.word	0x080074e7
 8007428:	08007717 	.word	0x08007717
 800742c:	0800777d 	.word	0x0800777d
 8007430:	0800758b 	.word	0x0800758b
 8007434:	080076bd 	.word	0x080076bd
 8007438:	080075c1 	.word	0x080075c1
 800743c:	080075e1 	.word	0x080075e1
 8007440:	08007601 	.word	0x08007601
 8007444:	0800762f 	.word	0x0800762f
 8007448:	080076ff 	.word	0x080076ff
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8193 	beq.w	8007780 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007460:	20c8      	movs	r0, #200	; 0xc8
 8007462:	f001 fca3 	bl	8008dac <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fb99 	bl	8008b9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800747c:	e180      	b.n	8007780 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007484:	2b01      	cmp	r3, #1
 8007486:	d107      	bne.n	8007498 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2202      	movs	r2, #2
 8007494:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007496:	e182      	b.n	800779e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800749e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074a2:	d914      	bls.n	80074ce <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074aa:	3301      	adds	r3, #1
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d903      	bls.n	80074c6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	220d      	movs	r2, #13
 80074c2:	701a      	strb	r2, [r3, #0]
      break;
 80074c4:	e16b      	b.n	800779e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	701a      	strb	r2, [r3, #0]
      break;
 80074cc:	e167      	b.n	800779e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80074d4:	f103 020a 	add.w	r2, r3, #10
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80074de:	200a      	movs	r0, #10
 80074e0:	f001 fc64 	bl	8008dac <USBH_Delay>
      break;
 80074e4:	e15b      	b.n	800779e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074f6:	2104      	movs	r1, #4
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80074fc:	2064      	movs	r0, #100	; 0x64
 80074fe:	f001 fc55 	bl	8008dac <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f001 fb24 	bl	8008b50 <USBH_LL_GetSpeed>
 8007508:	4603      	mov	r3, r0
 800750a:	461a      	mov	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2205      	movs	r2, #5
 8007516:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007518:	2100      	movs	r1, #0
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 f92f 	bl	800877e <USBH_AllocPipe>
 8007520:	4603      	mov	r3, r0
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007528:	2180      	movs	r1, #128	; 0x80
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 f927 	bl	800877e <USBH_AllocPipe>
 8007530:	4603      	mov	r3, r0
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7919      	ldrb	r1, [r3, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800754c:	b292      	uxth	r2, r2
 800754e:	9202      	str	r2, [sp, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	9201      	str	r2, [sp, #4]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4603      	mov	r3, r0
 8007558:	2280      	movs	r2, #128	; 0x80
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 f8e0 	bl	8008720 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7959      	ldrb	r1, [r3, #5]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007574:	b292      	uxth	r2, r2
 8007576:	9202      	str	r2, [sp, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	9201      	str	r2, [sp, #4]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4603      	mov	r3, r0
 8007580:	2200      	movs	r2, #0
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 f8cc 	bl	8008720 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007588:	e109      	b.n	800779e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f90c 	bl	80077a8 <USBH_HandleEnum>
 8007590:	4603      	mov	r3, r0
 8007592:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 80f3 	bne.w	8007784 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d103      	bne.n	80075b8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2208      	movs	r2, #8
 80075b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80075b6:	e0e5      	b.n	8007784 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2207      	movs	r2, #7
 80075bc:	701a      	strb	r2, [r3, #0]
      break;
 80075be:	e0e1      	b.n	8007784 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80de 	beq.w	8007788 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2208      	movs	r2, #8
 80075dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80075de:	e0d3      	b.n	8007788 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fc20 	bl	8007e30 <USBH_SetCfg>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 80ca 	bne.w	800778c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2209      	movs	r2, #9
 80075fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80075fe:	e0c5      	b.n	800778c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007606:	f003 0320 	and.w	r3, r3, #32
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800760e:	2101      	movs	r1, #1
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc30 	bl	8007e76 <USBH_SetFeature>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	f040 80b9 	bne.w	8007790 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	220a      	movs	r2, #10
 8007622:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007624:	e0b4      	b.n	8007790 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	220a      	movs	r2, #10
 800762a:	701a      	strb	r2, [r3, #0]
      break;
 800762c:	e0b0      	b.n	8007790 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80ad 	beq.w	8007794 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007642:	2300      	movs	r3, #0
 8007644:	73fb      	strb	r3, [r7, #15]
 8007646:	e016      	b.n	8007676 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007648:	7bfa      	ldrb	r2, [r7, #15]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	32de      	adds	r2, #222	; 0xde
 800764e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007652:	791a      	ldrb	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800765a:	429a      	cmp	r2, r3
 800765c:	d108      	bne.n	8007670 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800765e:	7bfa      	ldrb	r2, [r7, #15]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	32de      	adds	r2, #222	; 0xde
 8007664:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800766e:	e005      	b.n	800767c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	3301      	adds	r3, #1
 8007674:	73fb      	strb	r3, [r7, #15]
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0e5      	beq.n	8007648 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4798      	blx	r3
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d109      	bne.n	80076ac <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2206      	movs	r2, #6
 800769c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076a4:	2103      	movs	r1, #3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076aa:	e073      	b.n	8007794 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	220d      	movs	r2, #13
 80076b0:	701a      	strb	r2, [r3, #0]
      break;
 80076b2:	e06f      	b.n	8007794 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	220d      	movs	r2, #13
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e06b      	b.n	8007794 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d017      	beq.n	80076f6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220b      	movs	r2, #11
 80076e2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076e4:	e058      	b.n	8007798 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d154      	bne.n	8007798 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	220d      	movs	r2, #13
 80076f2:	701a      	strb	r2, [r3, #0]
      break;
 80076f4:	e050      	b.n	8007798 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	220d      	movs	r2, #13
 80076fa:	701a      	strb	r2, [r3, #0]
      break;
 80076fc:	e04c      	b.n	8007798 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d049      	beq.n	800779c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
      }
      break;
 8007714:	e042      	b.n	800779c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f7ff fd72 	bl	8007208 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d009      	beq.n	8007742 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007752:	2105      	movs	r1, #5
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d107      	bne.n	8007774 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff fe2b 	bl	80073c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007772:	e014      	b.n	800779e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f9b5 	bl	8008ae4 <USBH_LL_Start>
      break;
 800777a:	e010      	b.n	800779e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800777c:	bf00      	nop
 800777e:	e00e      	b.n	800779e <USBH_Process+0x3b6>
      break;
 8007780:	bf00      	nop
 8007782:	e00c      	b.n	800779e <USBH_Process+0x3b6>
      break;
 8007784:	bf00      	nop
 8007786:	e00a      	b.n	800779e <USBH_Process+0x3b6>
    break;
 8007788:	bf00      	nop
 800778a:	e008      	b.n	800779e <USBH_Process+0x3b6>
      break;
 800778c:	bf00      	nop
 800778e:	e006      	b.n	800779e <USBH_Process+0x3b6>
      break;
 8007790:	bf00      	nop
 8007792:	e004      	b.n	800779e <USBH_Process+0x3b6>
      break;
 8007794:	bf00      	nop
 8007796:	e002      	b.n	800779e <USBH_Process+0x3b6>
      break;
 8007798:	bf00      	nop
 800779a:	e000      	b.n	800779e <USBH_Process+0x3b6>
      break;
 800779c:	bf00      	nop
  }
  return USBH_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af04      	add	r7, sp, #16
 80077ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80077b0:	2301      	movs	r3, #1
 80077b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	785b      	ldrb	r3, [r3, #1]
 80077bc:	2b07      	cmp	r3, #7
 80077be:	f200 81c1 	bhi.w	8007b44 <USBH_HandleEnum+0x39c>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <USBH_HandleEnum+0x20>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077e9 	.word	0x080077e9
 80077cc:	080078a7 	.word	0x080078a7
 80077d0:	08007911 	.word	0x08007911
 80077d4:	0800799f 	.word	0x0800799f
 80077d8:	08007a09 	.word	0x08007a09
 80077dc:	08007a79 	.word	0x08007a79
 80077e0:	08007abf 	.word	0x08007abf
 80077e4:	08007b05 	.word	0x08007b05
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077e8:	2108      	movs	r1, #8
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa50 	bl	8007c90 <USBH_Get_DevDesc>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d130      	bne.n	800785c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7919      	ldrb	r1, [r3, #4]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800781e:	b292      	uxth	r2, r2
 8007820:	9202      	str	r2, [sp, #8]
 8007822:	2200      	movs	r2, #0
 8007824:	9201      	str	r2, [sp, #4]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4603      	mov	r3, r0
 800782a:	2280      	movs	r2, #128	; 0x80
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 ff77 	bl	8008720 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7959      	ldrb	r1, [r3, #5]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007846:	b292      	uxth	r2, r2
 8007848:	9202      	str	r2, [sp, #8]
 800784a:	2200      	movs	r2, #0
 800784c:	9201      	str	r2, [sp, #4]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	4603      	mov	r3, r0
 8007852:	2200      	movs	r2, #0
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 ff63 	bl	8008720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800785a:	e175      	b.n	8007b48 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b03      	cmp	r3, #3
 8007860:	f040 8172 	bne.w	8007b48 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800786a:	3301      	adds	r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800787a:	2b03      	cmp	r3, #3
 800787c:	d903      	bls.n	8007886 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	220d      	movs	r2, #13
 8007882:	701a      	strb	r2, [r3, #0]
      break;
 8007884:	e160      	b.n	8007b48 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	795b      	ldrb	r3, [r3, #5]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 ff97 	bl	80087c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 ff91 	bl	80087c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
      break;
 80078a4:	e150      	b.n	8007b48 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80078a6:	2112      	movs	r1, #18
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9f1 	bl	8007c90 <USBH_Get_DevDesc>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078be:	e145      	b.n	8007b4c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	f040 8142 	bne.w	8007b4c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078ce:	3301      	adds	r3, #1
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d903      	bls.n	80078ea <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	220d      	movs	r2, #13
 80078e6:	701a      	strb	r2, [r3, #0]
      break;
 80078e8:	e130      	b.n	8007b4c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	795b      	ldrb	r3, [r3, #5]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 ff65 	bl	80087c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 ff5f 	bl	80087c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
      break;
 800790e:	e11d      	b.n	8007b4c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007910:	2101      	movs	r1, #1
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa68 	bl	8007de8 <USBH_SetAddress>
 8007918:	4603      	mov	r3, r0
 800791a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d132      	bne.n	8007988 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007922:	2002      	movs	r0, #2
 8007924:	f001 fa42 	bl	8008dac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2203      	movs	r2, #3
 8007934:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	7919      	ldrb	r1, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800794a:	b292      	uxth	r2, r2
 800794c:	9202      	str	r2, [sp, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	9201      	str	r2, [sp, #4]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	4603      	mov	r3, r0
 8007956:	2280      	movs	r2, #128	; 0x80
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fee1 	bl	8008720 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7959      	ldrb	r1, [r3, #5]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007972:	b292      	uxth	r2, r2
 8007974:	9202      	str	r2, [sp, #8]
 8007976:	2200      	movs	r2, #0
 8007978:	9201      	str	r2, [sp, #4]
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	4603      	mov	r3, r0
 800797e:	2200      	movs	r2, #0
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fecd 	bl	8008720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007986:	e0e3      	b.n	8007b50 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b03      	cmp	r3, #3
 800798c:	f040 80e0 	bne.w	8007b50 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	220d      	movs	r2, #13
 8007994:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	705a      	strb	r2, [r3, #1]
      break;
 800799c:	e0d8      	b.n	8007b50 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800799e:	2109      	movs	r1, #9
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f99d 	bl	8007ce0 <USBH_Get_CfgDesc>
 80079a6:	4603      	mov	r3, r0
 80079a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2204      	movs	r2, #4
 80079b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079b6:	e0cd      	b.n	8007b54 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f040 80ca 	bne.w	8007b54 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079c6:	3301      	adds	r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d903      	bls.n	80079e2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	220d      	movs	r2, #13
 80079de:	701a      	strb	r2, [r3, #0]
      break;
 80079e0:	e0b8      	b.n	8007b54 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	795b      	ldrb	r3, [r3, #5]
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fee9 	bl	80087c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fee3 	bl	80087c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e0a5      	b.n	8007b54 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f965 	bl	8007ce0 <USBH_Get_CfgDesc>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2205      	movs	r2, #5
 8007a24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a26:	e097      	b.n	8007b58 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	f040 8094 	bne.w	8007b58 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a36:	3301      	adds	r3, #1
 8007a38:	b2da      	uxtb	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d903      	bls.n	8007a52 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	220d      	movs	r2, #13
 8007a4e:	701a      	strb	r2, [r3, #0]
      break;
 8007a50:	e082      	b.n	8007b58 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	795b      	ldrb	r3, [r3, #5]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 feb1 	bl	80087c0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 feab 	bl	80087c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
      break;
 8007a76:	e06f      	b.n	8007b58 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d019      	beq.n	8007ab6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a8e:	23ff      	movs	r3, #255	; 0xff
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f949 	bl	8007d28 <USBH_Get_StringDesc>
 8007a96:	4603      	mov	r3, r0
 8007a98:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a9a:	7bbb      	ldrb	r3, [r7, #14]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d103      	bne.n	8007aa8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2206      	movs	r2, #6
 8007aa4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007aa6:	e059      	b.n	8007b5c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d156      	bne.n	8007b5c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2206      	movs	r2, #6
 8007ab2:	705a      	strb	r2, [r3, #1]
      break;
 8007ab4:	e052      	b.n	8007b5c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2206      	movs	r2, #6
 8007aba:	705a      	strb	r2, [r3, #1]
      break;
 8007abc:	e04e      	b.n	8007b5c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d019      	beq.n	8007afc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ad4:	23ff      	movs	r3, #255	; 0xff
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f926 	bl	8007d28 <USBH_Get_StringDesc>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2207      	movs	r2, #7
 8007aea:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007aec:	e038      	b.n	8007b60 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d135      	bne.n	8007b60 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2207      	movs	r2, #7
 8007af8:	705a      	strb	r2, [r3, #1]
      break;
 8007afa:	e031      	b.n	8007b60 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2207      	movs	r2, #7
 8007b00:	705a      	strb	r2, [r3, #1]
      break;
 8007b02:	e02d      	b.n	8007b60 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d017      	beq.n	8007b3e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b1a:	23ff      	movs	r3, #255	; 0xff
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f903 	bl	8007d28 <USBH_Get_StringDesc>
 8007b22:	4603      	mov	r3, r0
 8007b24:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007b30:	e018      	b.n	8007b64 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d115      	bne.n	8007b64 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b3c:	e012      	b.n	8007b64 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
      break;
 8007b42:	e00f      	b.n	8007b64 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007b44:	bf00      	nop
 8007b46:	e00e      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b48:	bf00      	nop
 8007b4a:	e00c      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b4c:	bf00      	nop
 8007b4e:	e00a      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b50:	bf00      	nop
 8007b52:	e008      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b54:	bf00      	nop
 8007b56:	e006      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e004      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e002      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b60:	bf00      	nop
 8007b62:	e000      	b.n	8007b66 <USBH_HandleEnum+0x3be>
      break;
 8007b64:	bf00      	nop
  }
  return Status;
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f804 	bl	8007bb2 <USBH_HandleSof>
}
 8007baa:	bf00      	nop
 8007bac:	3708      	adds	r7, #8
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b0b      	cmp	r3, #11
 8007bc2:	d10a      	bne.n	8007bda <USBH_HandleSof+0x28>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	4798      	blx	r3
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007bf2:	bf00      	nop
}
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c0e:	bf00      	nop
}
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 ff56 	bl	8008b1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fda3 	bl	80087c0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	795b      	ldrb	r3, [r3, #5]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fd9d 	bl	80087c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ca2:	78fb      	ldrb	r3, [r7, #3]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f864 	bl	8007d7e <USBH_GetDescriptor>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	73fb      	strb	r3, [r7, #15]
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	b292      	uxth	r2, r2
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	f000 f918 	bl	8007f06 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	331c      	adds	r3, #28
 8007cf0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007cf2:	887b      	ldrh	r3, [r7, #2]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f83d 	bl	8007d7e <USBH_GetDescriptor>
 8007d04:	4603      	mov	r3, r0
 8007d06:	72fb      	strb	r3, [r7, #11]
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d107      	bne.n	8007d1e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d14:	887a      	ldrh	r2, [r7, #2]
 8007d16:	68f9      	ldr	r1, [r7, #12]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f964 	bl	8007fe6 <USBH_ParseCfgDesc>
  }

  return status;
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b088      	sub	sp, #32
 8007d2c:	af02      	add	r7, sp, #8
 8007d2e:	60f8      	str	r0, [r7, #12]
 8007d30:	607a      	str	r2, [r7, #4]
 8007d32:	461a      	mov	r2, r3
 8007d34:	460b      	mov	r3, r1
 8007d36:	72fb      	strb	r3, [r7, #11]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007d3c:	7afb      	ldrb	r3, [r7, #11]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d44:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007d4c:	893b      	ldrh	r3, [r7, #8]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	460b      	mov	r3, r1
 8007d52:	2100      	movs	r1, #0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f812 	bl	8007d7e <USBH_GetDescriptor>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	75fb      	strb	r3, [r7, #23]
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d107      	bne.n	8007d74 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d6a:	893a      	ldrh	r2, [r7, #8]
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fa37 	bl	80081e2 <USBH_ParseStringDesc>
  }

  return status;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	72fb      	strb	r3, [r7, #11]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	789b      	ldrb	r3, [r3, #2]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d11c      	bne.n	8007dd2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007d98:	7afb      	ldrb	r3, [r7, #11]
 8007d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2206      	movs	r2, #6
 8007da8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	893a      	ldrh	r2, [r7, #8]
 8007dae:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007db0:	893b      	ldrh	r3, [r7, #8]
 8007db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dba:	d104      	bne.n	8007dc6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f240 4209 	movw	r2, #1033	; 0x409
 8007dc2:	829a      	strh	r2, [r3, #20]
 8007dc4:	e002      	b.n	8007dcc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8b3a      	ldrh	r2, [r7, #24]
 8007dd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007dd2:	8b3b      	ldrh	r3, [r7, #24]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f000 fa50 	bl	800827e <USBH_CtlReq>
 8007dde:	4603      	mov	r3, r0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	789b      	ldrb	r3, [r3, #2]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d10f      	bne.n	8007e1c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2205      	movs	r2, #5
 8007e06:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e08:	78fb      	ldrb	r3, [r7, #3]
 8007e0a:	b29a      	uxth	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2100      	movs	r1, #0
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fa2c 	bl	800827e <USBH_CtlReq>
 8007e26:	4603      	mov	r3, r0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	789b      	ldrb	r3, [r3, #2]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d10e      	bne.n	8007e62 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2209      	movs	r2, #9
 8007e4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	887a      	ldrh	r2, [r7, #2]
 8007e54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa09 	bl	800827e <USBH_CtlReq>
 8007e6c:	4603      	mov	r3, r0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	789b      	ldrb	r3, [r3, #2]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d10f      	bne.n	8007eaa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2203      	movs	r2, #3
 8007e94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2100      	movs	r1, #0
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f9e5 	bl	800827e <USBH_CtlReq>
 8007eb4:	4603      	mov	r3, r0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	789b      	ldrb	r3, [r3, #2]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d10f      	bne.n	8007ef2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f9c1 	bl	800827e <USBH_CtlReq>
 8007efc:	4603      	mov	r3, r0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	785a      	ldrb	r2, [r3, #1]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3302      	adds	r3, #2
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	3303      	adds	r3, #3
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	021b      	lsls	r3, r3, #8
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	791a      	ldrb	r2, [r3, #4]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	795a      	ldrb	r2, [r3, #5]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	799a      	ldrb	r2, [r3, #6]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	79da      	ldrb	r2, [r3, #7]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d939      	bls.n	8007fda <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	3308      	adds	r3, #8
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	3309      	adds	r3, #9
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	021b      	lsls	r3, r3, #8
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	330a      	adds	r3, #10
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	330b      	adds	r3, #11
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	4313      	orrs	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	330d      	adds	r3, #13
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	021b      	lsls	r3, r3, #8
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	7b9a      	ldrb	r2, [r3, #14]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	7bda      	ldrb	r2, [r3, #15]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	7c1a      	ldrb	r2, [r3, #16]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	7c5a      	ldrb	r2, [r3, #17]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	745a      	strb	r2, [r3, #17]
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b08a      	sub	sp, #40	; 0x28
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	785a      	ldrb	r2, [r3, #1]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3302      	adds	r3, #2
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b29a      	uxth	r2, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	3303      	adds	r3, #3
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	b29b      	uxth	r3, r3
 800802c:	4313      	orrs	r3, r2
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	791a      	ldrb	r2, [r3, #4]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	795a      	ldrb	r2, [r3, #5]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	799a      	ldrb	r2, [r3, #6]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	79da      	ldrb	r2, [r3, #7]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	7a1a      	ldrb	r2, [r3, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	2b09      	cmp	r3, #9
 8008060:	d95f      	bls.n	8008122 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008062:	2309      	movs	r3, #9
 8008064:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800806a:	e051      	b.n	8008110 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800806c:	f107 0316 	add.w	r3, r7, #22
 8008070:	4619      	mov	r1, r3
 8008072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008074:	f000 f8e8 	bl	8008248 <USBH_GetNextDesc>
 8008078:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	2b04      	cmp	r3, #4
 8008080:	d146      	bne.n	8008110 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008086:	221a      	movs	r2, #26
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	3308      	adds	r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4413      	add	r3, r2
 8008092:	3302      	adds	r3, #2
 8008094:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008096:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008098:	69f8      	ldr	r0, [r7, #28]
 800809a:	f000 f846 	bl	800812a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080a8:	e022      	b.n	80080f0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80080aa:	f107 0316 	add.w	r3, r7, #22
 80080ae:	4619      	mov	r1, r3
 80080b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080b2:	f000 f8c9 	bl	8008248 <USBH_GetNextDesc>
 80080b6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d117      	bne.n	80080f0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80080c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80080c8:	3201      	adds	r2, #1
 80080ca:	00d2      	lsls	r2, r2, #3
 80080cc:	211a      	movs	r1, #26
 80080ce:	fb01 f303 	mul.w	r3, r1, r3
 80080d2:	4413      	add	r3, r2
 80080d4:	3308      	adds	r3, #8
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	4413      	add	r3, r2
 80080da:	3304      	adds	r3, #4
 80080dc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80080de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080e0:	69b8      	ldr	r0, [r7, #24]
 80080e2:	f000 f851 	bl	8008188 <USBH_ParseEPDesc>
            ep_ix++;
 80080e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80080ea:	3301      	adds	r3, #1
 80080ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	791b      	ldrb	r3, [r3, #4]
 80080f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d204      	bcs.n	8008106 <USBH_ParseCfgDesc+0x120>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	885a      	ldrh	r2, [r3, #2]
 8008100:	8afb      	ldrh	r3, [r7, #22]
 8008102:	429a      	cmp	r2, r3
 8008104:	d8d1      	bhi.n	80080aa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008106:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800810a:	3301      	adds	r3, #1
 800810c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008114:	2b01      	cmp	r3, #1
 8008116:	d804      	bhi.n	8008122 <USBH_ParseCfgDesc+0x13c>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	885a      	ldrh	r2, [r3, #2]
 800811c:	8afb      	ldrh	r3, [r7, #22]
 800811e:	429a      	cmp	r2, r3
 8008120:	d8a4      	bhi.n	800806c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008122:	bf00      	nop
 8008124:	3728      	adds	r7, #40	; 0x28
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800812a:	b480      	push	{r7}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781a      	ldrb	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	785a      	ldrb	r2, [r3, #1]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	789a      	ldrb	r2, [r3, #2]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	78da      	ldrb	r2, [r3, #3]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	791a      	ldrb	r2, [r3, #4]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	795a      	ldrb	r2, [r3, #5]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	799a      	ldrb	r2, [r3, #6]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	79da      	ldrb	r2, [r3, #7]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	7a1a      	ldrb	r2, [r3, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	721a      	strb	r2, [r3, #8]
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781a      	ldrb	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	785a      	ldrb	r2, [r3, #1]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	789a      	ldrb	r2, [r3, #2]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	78da      	ldrb	r2, [r3, #3]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	3304      	adds	r3, #4
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	3305      	adds	r3, #5
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	4313      	orrs	r3, r2
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	799a      	ldrb	r2, [r3, #6]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	719a      	strb	r2, [r3, #6]
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	4613      	mov	r3, r2
 80081ee:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d120      	bne.n	800823c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	1e9a      	subs	r2, r3, #2
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	4293      	cmp	r3, r2
 8008204:	bf28      	it	cs
 8008206:	4613      	movcs	r3, r2
 8008208:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3302      	adds	r3, #2
 800820e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008210:	2300      	movs	r3, #0
 8008212:	82fb      	strh	r3, [r7, #22]
 8008214:	e00b      	b.n	800822e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008216:	8afb      	ldrh	r3, [r7, #22]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	781a      	ldrb	r2, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	3301      	adds	r3, #1
 8008226:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008228:	8afb      	ldrh	r3, [r7, #22]
 800822a:	3302      	adds	r3, #2
 800822c:	82fb      	strh	r3, [r7, #22]
 800822e:	8afa      	ldrh	r2, [r7, #22]
 8008230:	8abb      	ldrh	r3, [r7, #20]
 8008232:	429a      	cmp	r2, r3
 8008234:	d3ef      	bcc.n	8008216 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2200      	movs	r2, #0
 800823a:	701a      	strb	r2, [r3, #0]
  }
}
 800823c:	bf00      	nop
 800823e:	371c      	adds	r7, #28
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	881a      	ldrh	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	4413      	add	r3, r2
 800825e:	b29a      	uxth	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008270:	68fb      	ldr	r3, [r7, #12]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	4613      	mov	r3, r2
 800828a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800828c:	2301      	movs	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	789b      	ldrb	r3, [r3, #2]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d002      	beq.n	800829e <USBH_CtlReq+0x20>
 8008298:	2b02      	cmp	r3, #2
 800829a:	d00f      	beq.n	80082bc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800829c:	e027      	b.n	80082ee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	88fa      	ldrh	r2, [r7, #6]
 80082a8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2202      	movs	r2, #2
 80082b4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80082b6:	2301      	movs	r3, #1
 80082b8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ba:	e018      	b.n	80082ee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f81b 	bl	80082f8 <USBH_HandleControl>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <USBH_CtlReq+0x54>
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d106      	bne.n	80082e0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2200      	movs	r2, #0
 80082dc:	761a      	strb	r2, [r3, #24]
      break;
 80082de:	e005      	b.n	80082ec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d102      	bne.n	80082ec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	709a      	strb	r2, [r3, #2]
      break;
 80082ec:	bf00      	nop
  }
  return status;
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008300:	2301      	movs	r3, #1
 8008302:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008304:	2300      	movs	r3, #0
 8008306:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	7e1b      	ldrb	r3, [r3, #24]
 800830c:	3b01      	subs	r3, #1
 800830e:	2b0a      	cmp	r3, #10
 8008310:	f200 8156 	bhi.w	80085c0 <USBH_HandleControl+0x2c8>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <USBH_HandleControl+0x24>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008349 	.word	0x08008349
 8008320:	08008363 	.word	0x08008363
 8008324:	080083cd 	.word	0x080083cd
 8008328:	080083f3 	.word	0x080083f3
 800832c:	0800842b 	.word	0x0800842b
 8008330:	08008455 	.word	0x08008455
 8008334:	080084a7 	.word	0x080084a7
 8008338:	080084c9 	.word	0x080084c9
 800833c:	08008505 	.word	0x08008505
 8008340:	0800852b 	.word	0x0800852b
 8008344:	08008569 	.word	0x08008569
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f103 0110 	add.w	r1, r3, #16
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	795b      	ldrb	r3, [r3, #5]
 8008352:	461a      	mov	r2, r3
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f943 	bl	80085e0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	761a      	strb	r2, [r3, #24]
      break;
 8008360:	e139      	b.n	80085d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fcc5 	bl	8008cf8 <USBH_LL_GetURBState>
 800836e:	4603      	mov	r3, r0
 8008370:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d11e      	bne.n	80083b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7c1b      	ldrb	r3, [r3, #16]
 800837c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008380:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	8adb      	ldrh	r3, [r3, #22]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800838a:	7b7b      	ldrb	r3, [r7, #13]
 800838c:	2b80      	cmp	r3, #128	; 0x80
 800838e:	d103      	bne.n	8008398 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2203      	movs	r2, #3
 8008394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008396:	e115      	b.n	80085c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2205      	movs	r2, #5
 800839c:	761a      	strb	r2, [r3, #24]
      break;
 800839e:	e111      	b.n	80085c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80083a0:	7b7b      	ldrb	r3, [r7, #13]
 80083a2:	2b80      	cmp	r3, #128	; 0x80
 80083a4:	d103      	bne.n	80083ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2209      	movs	r2, #9
 80083aa:	761a      	strb	r2, [r3, #24]
      break;
 80083ac:	e10a      	b.n	80085c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2207      	movs	r2, #7
 80083b2:	761a      	strb	r2, [r3, #24]
      break;
 80083b4:	e106      	b.n	80085c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d003      	beq.n	80083c4 <USBH_HandleControl+0xcc>
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	f040 8100 	bne.w	80085c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	220b      	movs	r2, #11
 80083c8:	761a      	strb	r2, [r3, #24]
      break;
 80083ca:	e0fb      	b.n	80085c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6899      	ldr	r1, [r3, #8]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	899a      	ldrh	r2, [r3, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	791b      	ldrb	r3, [r3, #4]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f93a 	bl	800865e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2204      	movs	r2, #4
 80083ee:	761a      	strb	r2, [r3, #24]
      break;
 80083f0:	e0f1      	b.n	80085d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fc7d 	bl	8008cf8 <USBH_LL_GetURBState>
 80083fe:	4603      	mov	r3, r0
 8008400:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d102      	bne.n	800840e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2209      	movs	r2, #9
 800840c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	2b05      	cmp	r3, #5
 8008412:	d102      	bne.n	800841a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008414:	2303      	movs	r3, #3
 8008416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008418:	e0d6      	b.n	80085c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b04      	cmp	r3, #4
 800841e:	f040 80d3 	bne.w	80085c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	220b      	movs	r2, #11
 8008426:	761a      	strb	r2, [r3, #24]
      break;
 8008428:	e0ce      	b.n	80085c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6899      	ldr	r1, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	899a      	ldrh	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	795b      	ldrb	r3, [r3, #5]
 8008436:	2001      	movs	r0, #1
 8008438:	9000      	str	r0, [sp, #0]
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8ea 	bl	8008614 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2206      	movs	r2, #6
 8008450:	761a      	strb	r2, [r3, #24]
      break;
 8008452:	e0c0      	b.n	80085d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	795b      	ldrb	r3, [r3, #5]
 8008458:	4619      	mov	r1, r3
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fc4c 	bl	8008cf8 <USBH_LL_GetURBState>
 8008460:	4603      	mov	r3, r0
 8008462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008464:	7bbb      	ldrb	r3, [r7, #14]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d103      	bne.n	8008472 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2207      	movs	r2, #7
 800846e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008470:	e0ac      	b.n	80085cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008472:	7bbb      	ldrb	r3, [r7, #14]
 8008474:	2b05      	cmp	r3, #5
 8008476:	d105      	bne.n	8008484 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	220c      	movs	r2, #12
 800847c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800847e:	2303      	movs	r3, #3
 8008480:	73fb      	strb	r3, [r7, #15]
      break;
 8008482:	e0a3      	b.n	80085cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008484:	7bbb      	ldrb	r3, [r7, #14]
 8008486:	2b02      	cmp	r3, #2
 8008488:	d103      	bne.n	8008492 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2205      	movs	r2, #5
 800848e:	761a      	strb	r2, [r3, #24]
      break;
 8008490:	e09c      	b.n	80085cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008492:	7bbb      	ldrb	r3, [r7, #14]
 8008494:	2b04      	cmp	r3, #4
 8008496:	f040 8099 	bne.w	80085cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	220b      	movs	r2, #11
 800849e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80084a0:	2302      	movs	r3, #2
 80084a2:	73fb      	strb	r3, [r7, #15]
      break;
 80084a4:	e092      	b.n	80085cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	791b      	ldrb	r3, [r3, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	2100      	movs	r1, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f8d5 	bl	800865e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2208      	movs	r2, #8
 80084c4:	761a      	strb	r2, [r3, #24]

      break;
 80084c6:	e086      	b.n	80085d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	791b      	ldrb	r3, [r3, #4]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fc12 	bl	8008cf8 <USBH_LL_GetURBState>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d105      	bne.n	80084ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	220d      	movs	r2, #13
 80084e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80084e8:	e072      	b.n	80085d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d103      	bne.n	80084f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	220b      	movs	r2, #11
 80084f4:	761a      	strb	r2, [r3, #24]
      break;
 80084f6:	e06b      	b.n	80085d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	d168      	bne.n	80085d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084fe:	2303      	movs	r3, #3
 8008500:	73fb      	strb	r3, [r7, #15]
      break;
 8008502:	e065      	b.n	80085d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	795b      	ldrb	r3, [r3, #5]
 8008508:	2201      	movs	r2, #1
 800850a:	9200      	str	r2, [sp, #0]
 800850c:	2200      	movs	r2, #0
 800850e:	2100      	movs	r1, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f87f 	bl	8008614 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800851c:	b29a      	uxth	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	220a      	movs	r2, #10
 8008526:	761a      	strb	r2, [r3, #24]
      break;
 8008528:	e055      	b.n	80085d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	795b      	ldrb	r3, [r3, #5]
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fbe1 	bl	8008cf8 <USBH_LL_GetURBState>
 8008536:	4603      	mov	r3, r0
 8008538:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d105      	bne.n	800854c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	220d      	movs	r2, #13
 8008548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800854a:	e043      	b.n	80085d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800854c:	7bbb      	ldrb	r3, [r7, #14]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d103      	bne.n	800855a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2209      	movs	r2, #9
 8008556:	761a      	strb	r2, [r3, #24]
      break;
 8008558:	e03c      	b.n	80085d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b04      	cmp	r3, #4
 800855e:	d139      	bne.n	80085d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	220b      	movs	r2, #11
 8008564:	761a      	strb	r2, [r3, #24]
      break;
 8008566:	e035      	b.n	80085d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7e5b      	ldrb	r3, [r3, #25]
 800856c:	3301      	adds	r3, #1
 800856e:	b2da      	uxtb	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	765a      	strb	r2, [r3, #25]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	7e5b      	ldrb	r3, [r3, #25]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d806      	bhi.n	800858a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008588:	e025      	b.n	80085d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008590:	2106      	movs	r1, #6
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	795b      	ldrb	r3, [r3, #5]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f90c 	bl	80087c0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	791b      	ldrb	r3, [r3, #4]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f906 	bl	80087c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80085ba:	2302      	movs	r3, #2
 80085bc:	73fb      	strb	r3, [r7, #15]
      break;
 80085be:	e00a      	b.n	80085d6 <USBH_HandleControl+0x2de>

    default:
      break;
 80085c0:	bf00      	nop
 80085c2:	e008      	b.n	80085d6 <USBH_HandleControl+0x2de>
      break;
 80085c4:	bf00      	nop
 80085c6:	e006      	b.n	80085d6 <USBH_HandleControl+0x2de>
      break;
 80085c8:	bf00      	nop
 80085ca:	e004      	b.n	80085d6 <USBH_HandleControl+0x2de>
      break;
 80085cc:	bf00      	nop
 80085ce:	e002      	b.n	80085d6 <USBH_HandleControl+0x2de>
      break;
 80085d0:	bf00      	nop
 80085d2:	e000      	b.n	80085d6 <USBH_HandleControl+0x2de>
      break;
 80085d4:	bf00      	nop
  }

  return status;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b088      	sub	sp, #32
 80085e4:	af04      	add	r7, sp, #16
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	4613      	mov	r3, r2
 80085ec:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80085ee:	79f9      	ldrb	r1, [r7, #7]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9303      	str	r3, [sp, #12]
 80085f4:	2308      	movs	r3, #8
 80085f6:	9302      	str	r3, [sp, #8]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	9301      	str	r3, [sp, #4]
 80085fc:	2300      	movs	r3, #0
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2300      	movs	r3, #0
 8008602:	2200      	movs	r2, #0
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 fb46 	bl	8008c96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af04      	add	r7, sp, #16
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	4611      	mov	r1, r2
 8008620:	461a      	mov	r2, r3
 8008622:	460b      	mov	r3, r1
 8008624:	80fb      	strh	r3, [r7, #6]
 8008626:	4613      	mov	r3, r2
 8008628:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008638:	7979      	ldrb	r1, [r7, #5]
 800863a:	7e3b      	ldrb	r3, [r7, #24]
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	88fb      	ldrh	r3, [r7, #6]
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	2301      	movs	r3, #1
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fb21 	bl	8008c96 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b088      	sub	sp, #32
 8008662:	af04      	add	r7, sp, #16
 8008664:	60f8      	str	r0, [r7, #12]
 8008666:	60b9      	str	r1, [r7, #8]
 8008668:	4611      	mov	r1, r2
 800866a:	461a      	mov	r2, r3
 800866c:	460b      	mov	r3, r1
 800866e:	80fb      	strh	r3, [r7, #6]
 8008670:	4613      	mov	r3, r2
 8008672:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008674:	7979      	ldrb	r1, [r7, #5]
 8008676:	2300      	movs	r3, #0
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	88fb      	ldrh	r3, [r7, #6]
 800867c:	9302      	str	r3, [sp, #8]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	2301      	movs	r3, #1
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	2300      	movs	r3, #0
 8008688:	2201      	movs	r2, #1
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 fb03 	bl	8008c96 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008690:	2300      	movs	r3, #0

}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b088      	sub	sp, #32
 800869e:	af04      	add	r7, sp, #16
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	4611      	mov	r1, r2
 80086a6:	461a      	mov	r2, r3
 80086a8:	460b      	mov	r3, r1
 80086aa:	80fb      	strh	r3, [r7, #6]
 80086ac:	4613      	mov	r3, r2
 80086ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086be:	7979      	ldrb	r1, [r7, #5]
 80086c0:	7e3b      	ldrb	r3, [r7, #24]
 80086c2:	9303      	str	r3, [sp, #12]
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	9302      	str	r3, [sp, #8]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	2301      	movs	r3, #1
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	2302      	movs	r3, #2
 80086d2:	2200      	movs	r2, #0
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 fade 	bl	8008c96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af04      	add	r7, sp, #16
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	4611      	mov	r1, r2
 80086f0:	461a      	mov	r2, r3
 80086f2:	460b      	mov	r3, r1
 80086f4:	80fb      	strh	r3, [r7, #6]
 80086f6:	4613      	mov	r3, r2
 80086f8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80086fa:	7979      	ldrb	r1, [r7, #5]
 80086fc:	2300      	movs	r3, #0
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	9302      	str	r3, [sp, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	9301      	str	r3, [sp, #4]
 8008708:	2301      	movs	r3, #1
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	2302      	movs	r3, #2
 800870e:	2201      	movs	r2, #1
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fac0 	bl	8008c96 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af04      	add	r7, sp, #16
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	4608      	mov	r0, r1
 800872a:	4611      	mov	r1, r2
 800872c:	461a      	mov	r2, r3
 800872e:	4603      	mov	r3, r0
 8008730:	70fb      	strb	r3, [r7, #3]
 8008732:	460b      	mov	r3, r1
 8008734:	70bb      	strb	r3, [r7, #2]
 8008736:	4613      	mov	r3, r2
 8008738:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800873a:	7878      	ldrb	r0, [r7, #1]
 800873c:	78ba      	ldrb	r2, [r7, #2]
 800873e:	78f9      	ldrb	r1, [r7, #3]
 8008740:	8b3b      	ldrh	r3, [r7, #24]
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	7d3b      	ldrb	r3, [r7, #20]
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	7c3b      	ldrb	r3, [r7, #16]
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	4603      	mov	r3, r0
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 fa53 	bl	8008bfa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	4619      	mov	r1, r3
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fa72 	bl	8008c58 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	460b      	mov	r3, r1
 8008788:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f836 	bl	80087fc <USBH_GetFreePipe>
 8008790:	4603      	mov	r3, r0
 8008792:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008794:	89fb      	ldrh	r3, [r7, #14]
 8008796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800879a:	4293      	cmp	r3, r2
 800879c:	d00a      	beq.n	80087b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	89fb      	ldrh	r3, [r7, #14]
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087aa:	6879      	ldr	r1, [r7, #4]
 80087ac:	33e0      	adds	r3, #224	; 0xe0
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80087b4:	89fb      	ldrh	r3, [r7, #14]
 80087b6:	b2db      	uxtb	r3, r3
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80087cc:	78fb      	ldrb	r3, [r7, #3]
 80087ce:	2b0a      	cmp	r3, #10
 80087d0:	d80d      	bhi.n	80087ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80087d2:	78fb      	ldrb	r3, [r7, #3]
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	33e0      	adds	r3, #224	; 0xe0
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087e4:	6879      	ldr	r1, [r7, #4]
 80087e6:	33e0      	adds	r3, #224	; 0xe0
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	440b      	add	r3, r1
 80087ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
 800880c:	e00f      	b.n	800882e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	33e0      	adds	r3, #224	; 0xe0
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d102      	bne.n	8008828 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008822:	7bfb      	ldrb	r3, [r7, #15]
 8008824:	b29b      	uxth	r3, r3
 8008826:	e007      	b.n	8008838 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	3301      	adds	r3, #1
 800882c:	73fb      	strb	r3, [r7, #15]
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b0a      	cmp	r3, #10
 8008832:	d9ec      	bls.n	800880e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008834:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008848:	2201      	movs	r2, #1
 800884a:	490e      	ldr	r1, [pc, #56]	; (8008884 <MX_USB_HOST_Init+0x40>)
 800884c:	480e      	ldr	r0, [pc, #56]	; (8008888 <MX_USB_HOST_Init+0x44>)
 800884e:	f7fe fca1 	bl	8007194 <USBH_Init>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d001      	beq.n	800885c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008858:	f7f8 fc8c 	bl	8001174 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800885c:	490b      	ldr	r1, [pc, #44]	; (800888c <MX_USB_HOST_Init+0x48>)
 800885e:	480a      	ldr	r0, [pc, #40]	; (8008888 <MX_USB_HOST_Init+0x44>)
 8008860:	f7fe fd26 	bl	80072b0 <USBH_RegisterClass>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800886a:	f7f8 fc83 	bl	8001174 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800886e:	4806      	ldr	r0, [pc, #24]	; (8008888 <MX_USB_HOST_Init+0x44>)
 8008870:	f7fe fdaa 	bl	80073c8 <USBH_Start>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800887a:	f7f8 fc7b 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800887e:	bf00      	nop
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	080088a5 	.word	0x080088a5
 8008888:	200001fc 	.word	0x200001fc
 800888c:	2000000c 	.word	0x2000000c

08008890 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008894:	4802      	ldr	r0, [pc, #8]	; (80088a0 <MX_USB_HOST_Process+0x10>)
 8008896:	f7fe fda7 	bl	80073e8 <USBH_Process>
}
 800889a:	bf00      	nop
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	200001fc 	.word	0x200001fc

080088a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d819      	bhi.n	80088ec <USBH_UserProcess+0x48>
 80088b8:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <USBH_UserProcess+0x1c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088ed 	.word	0x080088ed
 80088c4:	080088dd 	.word	0x080088dd
 80088c8:	080088ed 	.word	0x080088ed
 80088cc:	080088e5 	.word	0x080088e5
 80088d0:	080088d5 	.word	0x080088d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <USBH_UserProcess+0x58>)
 80088d6:	2203      	movs	r2, #3
 80088d8:	701a      	strb	r2, [r3, #0]
  break;
 80088da:	e008      	b.n	80088ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088dc:	4b07      	ldr	r3, [pc, #28]	; (80088fc <USBH_UserProcess+0x58>)
 80088de:	2202      	movs	r2, #2
 80088e0:	701a      	strb	r2, [r3, #0]
  break;
 80088e2:	e004      	b.n	80088ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088e4:	4b05      	ldr	r3, [pc, #20]	; (80088fc <USBH_UserProcess+0x58>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
  break;
 80088ea:	e000      	b.n	80088ee <USBH_UserProcess+0x4a>

  default:
  break;
 80088ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	200000b0 	.word	0x200000b0

08008900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08a      	sub	sp, #40	; 0x28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008908:	f107 0314 	add.w	r3, r7, #20
 800890c:	2200      	movs	r2, #0
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	60da      	str	r2, [r3, #12]
 8008916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008920:	d147      	bne.n	80089b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	4b25      	ldr	r3, [pc, #148]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 8008928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892a:	4a24      	ldr	r2, [pc, #144]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6313      	str	r3, [r2, #48]	; 0x30
 8008932:	4b22      	ldr	r3, [pc, #136]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	f003 0301 	and.w	r3, r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800893e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008944:	2300      	movs	r3, #0
 8008946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008948:	2300      	movs	r3, #0
 800894a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4619      	mov	r1, r3
 8008952:	481b      	ldr	r0, [pc, #108]	; (80089c0 <HAL_HCD_MspInit+0xc0>)
 8008954:	f7f8 ff40 	bl	80017d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008958:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800895c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800895e:	2302      	movs	r3, #2
 8008960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008966:	2303      	movs	r3, #3
 8008968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800896a:	230a      	movs	r3, #10
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800896e:	f107 0314 	add.w	r3, r7, #20
 8008972:	4619      	mov	r1, r3
 8008974:	4812      	ldr	r0, [pc, #72]	; (80089c0 <HAL_HCD_MspInit+0xc0>)
 8008976:	f7f8 ff2f 	bl	80017d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 800897c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897e:	4a0f      	ldr	r2, [pc, #60]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	6353      	str	r3, [r2, #52]	; 0x34
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	4a0b      	ldr	r2, [pc, #44]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 8008990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008994:	6453      	str	r3, [r2, #68]	; 0x44
 8008996:	4b09      	ldr	r3, [pc, #36]	; (80089bc <HAL_HCD_MspInit+0xbc>)
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800899e:	60fb      	str	r3, [r7, #12]
 80089a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	2043      	movs	r0, #67	; 0x43
 80089a8:	f7f8 fec6 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089ac:	2043      	movs	r0, #67	; 0x43
 80089ae:	f7f8 feef 	bl	8001790 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089b2:	bf00      	nop
 80089b4:	3728      	adds	r7, #40	; 0x28
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	40023800 	.word	0x40023800
 80089c0:	40020000 	.word	0x40020000

080089c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff f8db 	bl	8007b8e <USBH_LL_IncTimer>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff f913 	bl	8007c1a <USBH_LL_Connect>
}
 80089f4:	bf00      	nop
 80089f6:	3708      	adds	r7, #8
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff f91c 	bl	8007c48 <USBH_LL_Disconnect>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	460b      	mov	r3, r1
 8008a22:	70fb      	strb	r3, [r7, #3]
 8008a24:	4613      	mov	r3, r2
 8008a26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7ff f8cd 	bl	8007be2 <USBH_LL_PortEnabled>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7ff f8cd 	bl	8007bfe <USBH_LL_PortDisabled>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d12a      	bne.n	8008ad4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a7e:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a15      	ldr	r2, [pc, #84]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008a8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a8e:	4b14      	ldr	r3, [pc, #80]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008a90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a96:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008a98:	2208      	movs	r2, #8
 8008a9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a9c:	4b10      	ldr	r3, [pc, #64]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008aaa:	2202      	movs	r2, #2
 8008aac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008aae:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008ab4:	480a      	ldr	r0, [pc, #40]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008ab6:	f7f9 f9ab 	bl	8001e10 <HAL_HCD_Init>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ac0:	f7f8 fb58 	bl	8001174 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ac4:	4806      	ldr	r0, [pc, #24]	; (8008ae0 <USBH_LL_Init+0x74>)
 8008ac6:	f7f9 fd9a 	bl	80025fe <HAL_HCD_GetCurrentFrame>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff f84e 	bl	8007b70 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200005d4 	.word	0x200005d4

08008ae4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008af0:	2300      	movs	r3, #0
 8008af2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7f9 fd09 	bl	8002512 <HAL_HCD_Start>
 8008b00:	4603      	mov	r3, r0
 8008b02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b04:	7bfb      	ldrb	r3, [r7, #15]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f95c 	bl	8008dc4 <USBH_Get_USB_Status>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3710      	adds	r7, #16
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b084      	sub	sp, #16
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7f9 fd11 	bl	8002558 <HAL_HCD_Stop>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 f941 	bl	8008dc4 <USBH_Get_USB_Status>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b46:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f9 fd59 	bl	800261a <HAL_HCD_GetCurrentSpeed>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d00c      	beq.n	8008b88 <USBH_LL_GetSpeed+0x38>
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d80d      	bhi.n	8008b8e <USBH_LL_GetSpeed+0x3e>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <USBH_LL_GetSpeed+0x2c>
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d003      	beq.n	8008b82 <USBH_LL_GetSpeed+0x32>
 8008b7a:	e008      	b.n	8008b8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b80:	e008      	b.n	8008b94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b82:	2301      	movs	r3, #1
 8008b84:	73fb      	strb	r3, [r7, #15]
    break;
 8008b86:	e005      	b.n	8008b94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b88:	2302      	movs	r3, #2
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e002      	b.n	8008b94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	bf00      	nop
  }
  return  speed;
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7f9 fcec 	bl	8002592 <HAL_HCD_ResetPort>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f8ff 	bl	8008dc4 <USBH_Get_USB_Status>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008be6:	78fa      	ldrb	r2, [r7, #3]
 8008be8:	4611      	mov	r1, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f9 fcf3 	bl	80025d6 <HAL_HCD_HC_GetXferCount>
 8008bf0:	4603      	mov	r3, r0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bfa:	b590      	push	{r4, r7, lr}
 8008bfc:	b089      	sub	sp, #36	; 0x24
 8008bfe:	af04      	add	r7, sp, #16
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	461a      	mov	r2, r3
 8008c08:	4603      	mov	r3, r0
 8008c0a:	70fb      	strb	r3, [r7, #3]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70bb      	strb	r3, [r7, #2]
 8008c10:	4613      	mov	r3, r2
 8008c12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c22:	787c      	ldrb	r4, [r7, #1]
 8008c24:	78ba      	ldrb	r2, [r7, #2]
 8008c26:	78f9      	ldrb	r1, [r7, #3]
 8008c28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	4623      	mov	r3, r4
 8008c3a:	f7f9 f957 	bl	8001eec <HAL_HCD_HC_Init>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f000 f8bd 	bl	8008dc4 <USBH_Get_USB_Status>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd90      	pop	{r4, r7, pc}

08008c58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	460b      	mov	r3, r1
 8008c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	4611      	mov	r1, r2
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7f9 f9c7 	bl	800200a <HAL_HCD_HC_Halt>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 f89e 	bl	8008dc4 <USBH_Get_USB_Status>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c96:	b590      	push	{r4, r7, lr}
 8008c98:	b089      	sub	sp, #36	; 0x24
 8008c9a:	af04      	add	r7, sp, #16
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	70fb      	strb	r3, [r7, #3]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70bb      	strb	r3, [r7, #2]
 8008cac:	4613      	mov	r3, r2
 8008cae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008cbe:	787c      	ldrb	r4, [r7, #1]
 8008cc0:	78ba      	ldrb	r2, [r7, #2]
 8008cc2:	78f9      	ldrb	r1, [r7, #3]
 8008cc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cc8:	9303      	str	r3, [sp, #12]
 8008cca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ccc:	9302      	str	r3, [sp, #8]
 8008cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	4623      	mov	r3, r4
 8008cda:	f7f9 f9b9 	bl	8002050 <HAL_HCD_HC_SubmitRequest>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f86d 	bl	8008dc4 <USBH_Get_USB_Status>
 8008cea:	4603      	mov	r3, r0
 8008cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd90      	pop	{r4, r7, pc}

08008cf8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7f9 fc4d 	bl	80025ae <HAL_HCD_HC_GetURBState>
 8008d14:	4603      	mov	r3, r0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d103      	bne.n	8008d3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 f870 	bl	8008e1c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d3c:	20c8      	movs	r0, #200	; 0xc8
 8008d3e:	f7f8 fbe7 	bl	8001510 <HAL_Delay>
  return USBH_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3708      	adds	r7, #8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	460b      	mov	r3, r1
 8008d56:	70fb      	strb	r3, [r7, #3]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	212c      	movs	r1, #44	; 0x2c
 8008d6a:	fb01 f303 	mul.w	r3, r1, r3
 8008d6e:	4413      	add	r3, r2
 8008d70:	333b      	adds	r3, #59	; 0x3b
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d009      	beq.n	8008d8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d78:	78fb      	ldrb	r3, [r7, #3]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	212c      	movs	r1, #44	; 0x2c
 8008d7e:	fb01 f303 	mul.w	r3, r1, r3
 8008d82:	4413      	add	r3, r2
 8008d84:	3354      	adds	r3, #84	; 0x54
 8008d86:	78ba      	ldrb	r2, [r7, #2]
 8008d88:	701a      	strb	r2, [r3, #0]
 8008d8a:	e008      	b.n	8008d9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	212c      	movs	r1, #44	; 0x2c
 8008d92:	fb01 f303 	mul.w	r3, r1, r3
 8008d96:	4413      	add	r3, r2
 8008d98:	3355      	adds	r3, #85	; 0x55
 8008d9a:	78ba      	ldrb	r2, [r7, #2]
 8008d9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7f8 fbab 	bl	8001510 <HAL_Delay>
}
 8008dba:	bf00      	nop
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dd2:	79fb      	ldrb	r3, [r7, #7]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d817      	bhi.n	8008e08 <USBH_Get_USB_Status+0x44>
 8008dd8:	a201      	add	r2, pc, #4	; (adr r2, 8008de0 <USBH_Get_USB_Status+0x1c>)
 8008dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dde:	bf00      	nop
 8008de0:	08008df1 	.word	0x08008df1
 8008de4:	08008df7 	.word	0x08008df7
 8008de8:	08008dfd 	.word	0x08008dfd
 8008dec:	08008e03 	.word	0x08008e03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	73fb      	strb	r3, [r7, #15]
    break;
 8008df4:	e00b      	b.n	8008e0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008df6:	2302      	movs	r3, #2
 8008df8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfa:	e008      	b.n	8008e0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8008e00:	e005      	b.n	8008e0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008e02:	2302      	movs	r3, #2
 8008e04:	73fb      	strb	r3, [r7, #15]
    break;
 8008e06:	e002      	b.n	8008e0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e0c:	bf00      	nop
  }
  return usb_status;
 8008e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
 8008e34:	e001      	b.n	8008e3a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4803      	ldr	r0, [pc, #12]	; (8008e50 <MX_DriverVbusFS+0x34>)
 8008e42:	f7f8 ff8b 	bl	8001d5c <HAL_GPIO_WritePin>
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	40020800 	.word	0x40020800

08008e54 <__errno>:
 8008e54:	4b01      	ldr	r3, [pc, #4]	; (8008e5c <__errno+0x8>)
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	2000002c 	.word	0x2000002c

08008e60 <__libc_init_array>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	4d0d      	ldr	r5, [pc, #52]	; (8008e98 <__libc_init_array+0x38>)
 8008e64:	4c0d      	ldr	r4, [pc, #52]	; (8008e9c <__libc_init_array+0x3c>)
 8008e66:	1b64      	subs	r4, r4, r5
 8008e68:	10a4      	asrs	r4, r4, #2
 8008e6a:	2600      	movs	r6, #0
 8008e6c:	42a6      	cmp	r6, r4
 8008e6e:	d109      	bne.n	8008e84 <__libc_init_array+0x24>
 8008e70:	4d0b      	ldr	r5, [pc, #44]	; (8008ea0 <__libc_init_array+0x40>)
 8008e72:	4c0c      	ldr	r4, [pc, #48]	; (8008ea4 <__libc_init_array+0x44>)
 8008e74:	f000 f8f8 	bl	8009068 <_init>
 8008e78:	1b64      	subs	r4, r4, r5
 8008e7a:	10a4      	asrs	r4, r4, #2
 8008e7c:	2600      	movs	r6, #0
 8008e7e:	42a6      	cmp	r6, r4
 8008e80:	d105      	bne.n	8008e8e <__libc_init_array+0x2e>
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e88:	4798      	blx	r3
 8008e8a:	3601      	adds	r6, #1
 8008e8c:	e7ee      	b.n	8008e6c <__libc_init_array+0xc>
 8008e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e92:	4798      	blx	r3
 8008e94:	3601      	adds	r6, #1
 8008e96:	e7f2      	b.n	8008e7e <__libc_init_array+0x1e>
 8008e98:	080092a0 	.word	0x080092a0
 8008e9c:	080092a0 	.word	0x080092a0
 8008ea0:	080092a0 	.word	0x080092a0
 8008ea4:	080092a4 	.word	0x080092a4

08008ea8 <malloc>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <malloc+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f000 b863 	b.w	8008f78 <_malloc_r>
 8008eb2:	bf00      	nop
 8008eb4:	2000002c 	.word	0x2000002c

08008eb8 <free>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <free+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f000 b80b 	b.w	8008ed8 <_free_r>
 8008ec2:	bf00      	nop
 8008ec4:	2000002c 	.word	0x2000002c

08008ec8 <memset>:
 8008ec8:	4402      	add	r2, r0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d100      	bne.n	8008ed2 <memset+0xa>
 8008ed0:	4770      	bx	lr
 8008ed2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed6:	e7f9      	b.n	8008ecc <memset+0x4>

08008ed8 <_free_r>:
 8008ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eda:	2900      	cmp	r1, #0
 8008edc:	d048      	beq.n	8008f70 <_free_r+0x98>
 8008ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee2:	9001      	str	r0, [sp, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eea:	bfb8      	it	lt
 8008eec:	18e4      	addlt	r4, r4, r3
 8008eee:	f000 f8ad 	bl	800904c <__malloc_lock>
 8008ef2:	4a20      	ldr	r2, [pc, #128]	; (8008f74 <_free_r+0x9c>)
 8008ef4:	9801      	ldr	r0, [sp, #4]
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	4615      	mov	r5, r2
 8008efa:	b933      	cbnz	r3, 8008f0a <_free_r+0x32>
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	6014      	str	r4, [r2, #0]
 8008f00:	b003      	add	sp, #12
 8008f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f06:	f000 b8a7 	b.w	8009058 <__malloc_unlock>
 8008f0a:	42a3      	cmp	r3, r4
 8008f0c:	d90b      	bls.n	8008f26 <_free_r+0x4e>
 8008f0e:	6821      	ldr	r1, [r4, #0]
 8008f10:	1862      	adds	r2, r4, r1
 8008f12:	4293      	cmp	r3, r2
 8008f14:	bf04      	itt	eq
 8008f16:	681a      	ldreq	r2, [r3, #0]
 8008f18:	685b      	ldreq	r3, [r3, #4]
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	bf04      	itt	eq
 8008f1e:	1852      	addeq	r2, r2, r1
 8008f20:	6022      	streq	r2, [r4, #0]
 8008f22:	602c      	str	r4, [r5, #0]
 8008f24:	e7ec      	b.n	8008f00 <_free_r+0x28>
 8008f26:	461a      	mov	r2, r3
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	b10b      	cbz	r3, 8008f30 <_free_r+0x58>
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d9fa      	bls.n	8008f26 <_free_r+0x4e>
 8008f30:	6811      	ldr	r1, [r2, #0]
 8008f32:	1855      	adds	r5, r2, r1
 8008f34:	42a5      	cmp	r5, r4
 8008f36:	d10b      	bne.n	8008f50 <_free_r+0x78>
 8008f38:	6824      	ldr	r4, [r4, #0]
 8008f3a:	4421      	add	r1, r4
 8008f3c:	1854      	adds	r4, r2, r1
 8008f3e:	42a3      	cmp	r3, r4
 8008f40:	6011      	str	r1, [r2, #0]
 8008f42:	d1dd      	bne.n	8008f00 <_free_r+0x28>
 8008f44:	681c      	ldr	r4, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	6053      	str	r3, [r2, #4]
 8008f4a:	4421      	add	r1, r4
 8008f4c:	6011      	str	r1, [r2, #0]
 8008f4e:	e7d7      	b.n	8008f00 <_free_r+0x28>
 8008f50:	d902      	bls.n	8008f58 <_free_r+0x80>
 8008f52:	230c      	movs	r3, #12
 8008f54:	6003      	str	r3, [r0, #0]
 8008f56:	e7d3      	b.n	8008f00 <_free_r+0x28>
 8008f58:	6825      	ldr	r5, [r4, #0]
 8008f5a:	1961      	adds	r1, r4, r5
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	bf04      	itt	eq
 8008f60:	6819      	ldreq	r1, [r3, #0]
 8008f62:	685b      	ldreq	r3, [r3, #4]
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	bf04      	itt	eq
 8008f68:	1949      	addeq	r1, r1, r5
 8008f6a:	6021      	streq	r1, [r4, #0]
 8008f6c:	6054      	str	r4, [r2, #4]
 8008f6e:	e7c7      	b.n	8008f00 <_free_r+0x28>
 8008f70:	b003      	add	sp, #12
 8008f72:	bd30      	pop	{r4, r5, pc}
 8008f74:	200000b4 	.word	0x200000b4

08008f78 <_malloc_r>:
 8008f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7a:	1ccd      	adds	r5, r1, #3
 8008f7c:	f025 0503 	bic.w	r5, r5, #3
 8008f80:	3508      	adds	r5, #8
 8008f82:	2d0c      	cmp	r5, #12
 8008f84:	bf38      	it	cc
 8008f86:	250c      	movcc	r5, #12
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	db01      	blt.n	8008f92 <_malloc_r+0x1a>
 8008f8e:	42a9      	cmp	r1, r5
 8008f90:	d903      	bls.n	8008f9a <_malloc_r+0x22>
 8008f92:	230c      	movs	r3, #12
 8008f94:	6033      	str	r3, [r6, #0]
 8008f96:	2000      	movs	r0, #0
 8008f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f9a:	f000 f857 	bl	800904c <__malloc_lock>
 8008f9e:	4921      	ldr	r1, [pc, #132]	; (8009024 <_malloc_r+0xac>)
 8008fa0:	680a      	ldr	r2, [r1, #0]
 8008fa2:	4614      	mov	r4, r2
 8008fa4:	b99c      	cbnz	r4, 8008fce <_malloc_r+0x56>
 8008fa6:	4f20      	ldr	r7, [pc, #128]	; (8009028 <_malloc_r+0xb0>)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	b923      	cbnz	r3, 8008fb6 <_malloc_r+0x3e>
 8008fac:	4621      	mov	r1, r4
 8008fae:	4630      	mov	r0, r6
 8008fb0:	f000 f83c 	bl	800902c <_sbrk_r>
 8008fb4:	6038      	str	r0, [r7, #0]
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4630      	mov	r0, r6
 8008fba:	f000 f837 	bl	800902c <_sbrk_r>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d123      	bne.n	800900a <_malloc_r+0x92>
 8008fc2:	230c      	movs	r3, #12
 8008fc4:	6033      	str	r3, [r6, #0]
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f000 f846 	bl	8009058 <__malloc_unlock>
 8008fcc:	e7e3      	b.n	8008f96 <_malloc_r+0x1e>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	1b5b      	subs	r3, r3, r5
 8008fd2:	d417      	bmi.n	8009004 <_malloc_r+0x8c>
 8008fd4:	2b0b      	cmp	r3, #11
 8008fd6:	d903      	bls.n	8008fe0 <_malloc_r+0x68>
 8008fd8:	6023      	str	r3, [r4, #0]
 8008fda:	441c      	add	r4, r3
 8008fdc:	6025      	str	r5, [r4, #0]
 8008fde:	e004      	b.n	8008fea <_malloc_r+0x72>
 8008fe0:	6863      	ldr	r3, [r4, #4]
 8008fe2:	42a2      	cmp	r2, r4
 8008fe4:	bf0c      	ite	eq
 8008fe6:	600b      	streq	r3, [r1, #0]
 8008fe8:	6053      	strne	r3, [r2, #4]
 8008fea:	4630      	mov	r0, r6
 8008fec:	f000 f834 	bl	8009058 <__malloc_unlock>
 8008ff0:	f104 000b 	add.w	r0, r4, #11
 8008ff4:	1d23      	adds	r3, r4, #4
 8008ff6:	f020 0007 	bic.w	r0, r0, #7
 8008ffa:	1ac2      	subs	r2, r0, r3
 8008ffc:	d0cc      	beq.n	8008f98 <_malloc_r+0x20>
 8008ffe:	1a1b      	subs	r3, r3, r0
 8009000:	50a3      	str	r3, [r4, r2]
 8009002:	e7c9      	b.n	8008f98 <_malloc_r+0x20>
 8009004:	4622      	mov	r2, r4
 8009006:	6864      	ldr	r4, [r4, #4]
 8009008:	e7cc      	b.n	8008fa4 <_malloc_r+0x2c>
 800900a:	1cc4      	adds	r4, r0, #3
 800900c:	f024 0403 	bic.w	r4, r4, #3
 8009010:	42a0      	cmp	r0, r4
 8009012:	d0e3      	beq.n	8008fdc <_malloc_r+0x64>
 8009014:	1a21      	subs	r1, r4, r0
 8009016:	4630      	mov	r0, r6
 8009018:	f000 f808 	bl	800902c <_sbrk_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d1dd      	bne.n	8008fdc <_malloc_r+0x64>
 8009020:	e7cf      	b.n	8008fc2 <_malloc_r+0x4a>
 8009022:	bf00      	nop
 8009024:	200000b4 	.word	0x200000b4
 8009028:	200000b8 	.word	0x200000b8

0800902c <_sbrk_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d06      	ldr	r5, [pc, #24]	; (8009048 <_sbrk_r+0x1c>)
 8009030:	2300      	movs	r3, #0
 8009032:	4604      	mov	r4, r0
 8009034:	4608      	mov	r0, r1
 8009036:	602b      	str	r3, [r5, #0]
 8009038:	f7f8 f986 	bl	8001348 <_sbrk>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_sbrk_r+0x1a>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_sbrk_r+0x1a>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	200008d8 	.word	0x200008d8

0800904c <__malloc_lock>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__malloc_lock+0x8>)
 800904e:	f000 b809 	b.w	8009064 <__retarget_lock_acquire_recursive>
 8009052:	bf00      	nop
 8009054:	200008e0 	.word	0x200008e0

08009058 <__malloc_unlock>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__malloc_unlock+0x8>)
 800905a:	f000 b804 	b.w	8009066 <__retarget_lock_release_recursive>
 800905e:	bf00      	nop
 8009060:	200008e0 	.word	0x200008e0

08009064 <__retarget_lock_acquire_recursive>:
 8009064:	4770      	bx	lr

08009066 <__retarget_lock_release_recursive>:
 8009066:	4770      	bx	lr

08009068 <_init>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	bf00      	nop
 800906c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800906e:	bc08      	pop	{r3}
 8009070:	469e      	mov	lr, r3
 8009072:	4770      	bx	lr

08009074 <_fini>:
 8009074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009076:	bf00      	nop
 8009078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907a:	bc08      	pop	{r3}
 800907c:	469e      	mov	lr, r3
 800907e:	4770      	bx	lr
